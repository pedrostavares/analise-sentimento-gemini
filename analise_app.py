# -*- coding: utf-8 -*- # Adicionado para garantir codifica√ß√£o UTF-8

import streamlit as st
import pandas as pd
import google.generativeai as genai
import io # Para lidar com o arquivo em mem√≥ria
import time # Para poss√≠veis pausas
import plotly.express as px # Para gr√°ficos
import numpy as np # Para c√°lculos num√©ricos (usado no NPS)

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    layout="wide",
    page_title="An√°lise de Sentimento e Tem√°tica - IH",
    page_icon="üìä"
)

# --- Inicializa√ß√£o do Estado da Sess√£o ---
if 'api_key_configured' not in st.session_state: st.session_state.api_key_configured = False
if 'api_key_input_value' not in st.session_state: st.session_state.api_key_input_value = ""
if 'analysis_done' not in st.session_state: st.session_state.analysis_done = False
if 'df_results' not in st.session_state: st.session_state.df_results = None
if 'insights_generated' not in st.session_state: st.session_state.insights_generated = None

# --- Configura√ß√£o da API Key ---
api_key_source = None
try:
    if hasattr(st, 'secrets') and "GOOGLE_API_KEY" in st.secrets:
        st.session_state.api_key_input_value = st.secrets["GOOGLE_API_KEY"]
        api_key_source = "secrets"
except Exception as e:
    st.sidebar.warning(f"N√£o foi poss√≠vel ler os secrets: {e}", icon="‚ö†Ô∏è")

# --- Interface da Barra Lateral para API Key ---
st.sidebar.header("Configura√ß√£o")
if api_key_source != "secrets":
    user_provided_key = st.sidebar.text_input(
        "Insira sua Google API Key aqui:", type="password",
        key="api_key_widget", value=st.session_state.api_key_input_value,
        help="Sua chave da API do Google AI Studio (Gemini)."
    )
    if user_provided_key != st.session_state.api_key_input_value:
         st.session_state.api_key_input_value = user_provided_key
         st.session_state.api_key_configured = False
         st.session_state.analysis_done = False
         st.session_state.insights_generated = None
         st.rerun()
else:
    st.sidebar.success("API Key carregada dos segredos!", icon="‚úÖ")
    if not st.session_state.api_key_configured:
        st.session_state.api_key_configured = False

# --- Tentativa de Configurar a API e o Modelo ---
model = None
if st.session_state.api_key_input_value and not st.session_state.api_key_configured:
    try:
        genai.configure(api_key=st.session_state.api_key_input_value)
        model = genai.GenerativeModel('gemini-1.5-flash')
        st.session_state.api_key_configured = True
        if api_key_source != "secrets":
            st.sidebar.success("API Key configurada com sucesso!", icon="üîë")
        st.sidebar.caption(f"Modelo Gemini: gemini-1.5-flash")
    except Exception as e:
        st.sidebar.error(f"Erro ao configurar API Key/Modelo. Verifique a chave.", icon="üö®")
        st.session_state.api_key_configured = False
        model = None
elif st.session_state.api_key_configured:
     try:
         model = genai.GenerativeModel('gemini-1.5-flash')
     except Exception as e:
         st.sidebar.error(f"Erro ao recarregar o Modelo: {e}", icon="üö®")
         st.session_state.api_key_configured = False
         model = None


# --- Prompt Principal REFINADO v7 (Baseado na An√°lise Comparativa e Feedback v3) ---
seu_prompt_completo = """
Persona: Voc√™ √© uma IA Analista de Feedback de Clientes e Social Listening altamente especializada no setor banc√°rio brasileiro, com profundo conhecimento sobre o Banco Ita√∫ e seu ecossistema de marcas (Ita√∫, Personnalit√©, Uniclass, Empresas, √≠on, Private, BBA, Itubers). Voc√™ compreende produtos (CDB, LCI, Pix), jarg√µes (TED, DOC) e o contexto de campanhas (influenciadores, eventos como Rock in Rio, The Town). Sua an√°lise combina rigor na aplica√ß√£o das regras com compreens√£o contextual.

Objetivo:
1.	Prim√°rio: Classificar CADA mensagem recebida em Portugu√™s do Brasil (Pt-BR) em UMA categoria de Sentimento e UMA categoria Tem√°tica, aderindo ESTRITAMENTE √†s defini√ß√µes, regras e prioridades abaixo.
2.	Secund√°rio: (Este prompt foca APENAS na classifica√ß√£o).

Contexto Geral: Mensagens de clientes/p√∫blico sobre posts/conte√∫dos do Ita√∫ e submarcas (produtos, servi√ßos, atendimento, plataformas, campanhas, patroc√≠nios, imagem). Rea√ß√µes curtas s√£o contextuais ao post original.

=== REGRAS GERAIS E DE OURO ===
1.  An√°lise Dupla Obrigat√≥ria: Sentimento + Tema para cada mensagem.
2.  **APLIQUE AS REGRAS DE "N√ÉO CLASSIFICADO" PRIMEIRO:** Se a mensagem se encaixar em QUALQUER crit√©rio de N√£o Classificado (ver se√ß√£o NC abaixo), classifique IMEDIATAMENTE como Sentimento: N√£o Classificado, Tema: N√£o Classificado (Tema) e N√ÉO prossiga. S√≥ avance para P/N/Neutro se NENHUM crit√©rio NC se aplicar.
3.  Priorize P/N/Neutro: Se n√£o for NC, use as defini√ß√µes abaixo.
4.  Vincula√ß√£o NC Estrita: Se Sentimento = N√£o Classificado, Tema DEVE SER SEMPRE N√£o Classificado (Tema). SEM EXCE√á√ïES.
5.  Foco no Conte√∫do Relevante: Ignore ru√≠dos como sauda√ß√µes isoladas no in√≠cio/fim se houver conte√∫do principal. Classifique com base na inten√ß√£o principal da mensagem.

=== N√ÉO CLASSIFICADO (APLICAR PRIMEIRO!) ===
4.	N√£o Classificado: APLICAR **OBRIGATORIAMENTE E PRIORITARIAMENTE** SE A MENSAGEM ATENDER A UM DESTES CRIT√âRIOS (ANTES de tentar P/N/Neutro):
    1.	**Idioma Estrangeiro (predominante):** Ex: "What time?", "gracias por venir", "Do not sleep on solta o pavo", "You ‚ù§Ô∏è v√≠rus", "@itau We are urging...".
    2.	**Incompreens√≠vel:** Erros graves, digita√ß√£o aleat√≥ria, texto sem sentido l√≥gico, g√≠rias/termos muito espec√≠ficos e incompreens√≠veis sem contexto. Ex: "asdf ghjk", "L0p9l9", "Kbut", ".oitoitoitameiamei", "Tadala! K", "S√≥ qu√≠mica por s√£o broxar", "Mercado de banco", `^`, `>>`, "üëëüåéüëë".
    3.	**Men√ß√£o @ Isolada ou Men√ß√£o + Texto Incompleto/Amb√≠guo:** Cont√©m APENAS o s√≠mbolo `@` isolado, ou men√ß√£o (@ ou []) mas o texto acompanhante √© incompreens√≠vel, amb√≠guo demais para classificar, ou apenas uma letra/n√∫mero/emoji sem contexto claro. Ex: `"@"` (como √∫nica mensagem), `@itau p`, `@itau 2`, `@itau ...`, `@2ü•∫`. **N√ÉO inclui men√ß√£o a usu√°rio isolada (ex: `@pedrotavares`), que √© Positivo/Intera√ß√£o.**
    4.	**Spam/Link Isolado:** Conte√∫do repetitivo √≥bvio (Illuminati, Pedidos de amizade), promo√ß√µes n√£o relacionadas, propaganda de terceiros, URL isolada SEM contexto relevante ou explica√ß√£o. Ex: "Confira: https://...", "https://t.co/xxxxx", "Buy #Bitcoin üëç", "Apostas Gr√°tis...", "@c................:n√£o traduza...", "Carlos Correa Voc√™ quer se tornar...", "Helcia Ione Ol√° ü§ó...", "As indica√ß√µes da @eu.luisaschz √© surreal...", "Gente to com uma plataforma nova boa...", "Revendo IPTV me chamem".
    5.	**Totalmente Off-Topic:** Assunto sem QUALQUER conex√£o clara com Ita√∫, bancos, finan√ßas, produtos/servi√ßos financeiros, a campanha/evento em quest√£o, ou figuras p√∫blicas associadas. Ex: "Receita de bolo", "Anistia j√°!", "√â movimento pro Alckmin assumir?", "@que Deus aben√ßoe voc√™s...", "ESTOU COM DOR ORE POR MIM", "@mo√ßo de onde √© esse calend√°rio?", "Trump est√° chegando...", "Voc√™s atendem a N.O.M.", coment√°rio sobre time de futebol n√£o relacionado a patroc√≠nio, "@N√£o, obrigado... De repeti√ß√£o j√° ch ga minha mulher reclamando.", "Hermes trismegisto...", "Fernanda Torres √© Truong My Lan.", "Roupa de cama e toalha cheirosinha...", "hoje em dia faz sol e eu penso...", "Nv cash melhor", "Cad√™ a sobrancelha?", "Spotfy e netflix", "A NOSSA CAMISA JAMAIS SER√Å VERMELHA...", "Quem fala :   QUEM ME CONHECE, SABE...", "tem o banco central para resolver tudo isso...", "Gente esquisita, papo estranho!", "Ggmax", "Papa francisco", "N√£o.dependo.de.baco", "Assistem ao filme : Pol√≠cia Federal...", "O dedo de marcar meu cunhado chega co√ßar", "Eu sou inturiana com ascendente planilheriana ü§≠", "Consulta urgente = devo comprar passagem...", "pois √© minha amiga Deus escreve certo...", "mamae". **Inclui discuss√µes sobre pirataria/alternativas n√£o oficiais:** "Compro na gg Max combo...", "Gatonet sempre salvando", "Eles pagam pra ver filmes...", "N√£o gasto nada eu baixo m√∫sica...", "Uso gato. Kkk", "I ‚ù§Ô∏è torrent", "20 reais IPTV viva a pirataria", "Eu uso youcine...", "20 reais no youcine tenho tudo kkkkk", "Rede Canais reina", "Tmj YouCine e CineVs", "Vendo filme no redecanais...", "Avisa a√≠ que vende um aparelho...".
    6.	**Intera√ß√£o Social Pura Textual/Emoji Isolada:** Mensagem cont√©m APENAS sauda√ß√µes/despedidas ("Bom dia", "Boa noite amigo", "@BOA TADE", "Oi", "Tchau"), APENAS risadas textuais ("kkkk", "rsrs", "üòÇüòÇüòÇüòÇ", "Kkkkkk aiai"), APENAS agradecimentos/express√µes religiosas gen√©ricas isoladas ("Obg", "Amem", "@amem", "Am√©m üôèüôè"), APENAS concord√¢ncias curtas isoladas ("Isso a√≠"), ou APENAS emojis de intera√ß√£o social ou pontua√ß√£o isolados. Ex: "@amem", "@boa noite", "kkkk", "üëç" (isolado), "‚ù§Ô∏è" (isolado), `‚ò∫Ô∏è` (isolado), `@Oi?`, `!!!!!!!!!!!!!!` (isolado), `.` (isolado), `üòÇ` (isolado). *N√ÉO aplicar se a intera√ß√£o acompanha conte√∫do classific√°vel (Ex: "kkkk adorei" -> classificar "adorei").*

=== DEFINI√á√ïES DE SENTIMENTO (Escolha UMA, AP√ìS verificar regras NC) ===

1.	Positivo: Expressa satisfa√ß√£o, apoio, entusiasmo, gratid√£o genu√≠na, aprecia√ß√£o (mesmo moderada), concord√¢ncia clara, ou engajamento positivo expl√≠cito, **incluindo men√ß√£o a usu√°rio isolada ou @respostas vagas com tom positivo.**
    *   Indicadores: **Men√ß√£o a usu√°rio isolada (Ex: `@pedrotavares`, `[Luiz Erik]`, `@katia.alje`, `@livinhalp_`) - SEMPRE Positivo/Intera√ß√£o Social.** **@Respostas vagas com interjei√ß√µes/emojis positivos (Ex: `@rafabarrosr aaaaa feliz demais üß°`, `@victorreegis üß°!`, `@_a.amandah ebaaaa!...`, `@gggggabito UHULLL`, `@juliavarga ‚ù§Ô∏è‚ù§Ô∏è`, `@stephaniebegami ‚ù§Ô∏è`) - Positivo/Intera√ß√£o Social.** Elogios claros ("Amei", "Top", "Excelente", "Maravilhoso", "Grande Mestre", "Melhor propaganda", "amo amo", "A dic√ß√£o dessa mulher √© um absurdo." [elogio], "itau pfvr nao teria pessoa melhor", "GENTE EH COM MTA ALEGRIA Q ANUNCIO Q EU E @itau ESTAMOS BEM...", "Que bom oubrigado"), Agradecimentos espec√≠ficos, Apoio/Torcida ("Parab√©ns", "QUEREMOS TURN√ä!", "Voc√™s s√£o os MAIORAIS"), Aprecia√ß√£o ("Belo post", "Interessante", "De arrepiar", "Kkkkkk arrepiou aqui tamb√©m"), Concord√¢ncia expl√≠cita positiva; **Influ√™ncia positiva por figura p√∫blica ("Sil√™ncio estou estudando com a Ari Segatto", "recebi a notifica√ß√£o... mas j√° que a julia falou, vou ver")**, **Inten√ß√£o positiva ("Agora vou correndo abrir minha conta", "quero fazer as pazes com o ita√∫ tb!!!", "eu que pedi essa categoria...")**. Emojis claramente positivos isolados ou acompanhando texto positivo (üòç, ‚ù§Ô∏è, üëç, üéâ, ‚ú®, üëè, üôå, üôè, ü´∂, üíñ, üß°, üíô, ‚ú®‚ù§Ô∏è, üòÇüëè, üôåüëè, üëëüåéüëë, üòò, üëÑ, üå∑, üåπ); Combina√ß√µes Texto/Emoji Positivo. **Focar no ponto principal em mensagens mistas (Ex: "@itau Alguem q investe em musica de verdade e nao essa bosta de sertanejo... Salve Jorge!!!" -> Foco no "investe em musica de verdade/Salve Jorge" -> Positivo).**

2.	Negativo: Expressa insatisfa√ß√£o, cr√≠tica, raiva, frustra√ß√£o, reclama√ß√£o, tristeza, **sarcasmo, ironia, deboche, acusa√ß√£o**, ou **afirma√ß√£o/relato direto** de problema, falha, erro, golpe, fraude ou experi√™ncia ruim.
    *   Indicadores: Cr√≠ticas diretas ("P√©ssimo", "Banco lixo", "Que bosta", "A MO√áA DO ITA√ö... FUI ENGANADO.", "√â muita reclama√ß√£o", "Ita√∫ est√° p√©ssimo", "Pior banco"), **Relato/afirma√ß√£o de problemas ("N√£o funciona CDB", "Cobran√ßa indevida", "Fui v√≠tima de golpe", "@itau Erro TED", "n√£o estava conseguindo acessar o app", "@itau Cuidado com o app...Banco n√£o computa...", "Fizeram a migra√ß√£o sem minha autoriza√ß√£o... Cad√™ meu dinheiroooo? üò°üò°üôÑ", "Bug na migra√ß√£o... chave Pix... sumiu", "O Ita√∫ √© uma porcaria pra entrar...", "Carregador port√°til n√£o funciona.")**, Reclama√ß√µes diretas ("Atendimento horr√≠vel", "P√©ssimo atendimento"), Insatisfa√ß√£o direta ("Taxa alta", "Quero taxa mais baixa", "Pago um monte de taxas...", "limite tinha diminuido", "Assisti esperando... antigamente tinham v√°rios descontos... hoje n√£o tem mais nada ü§®"), Frustra√ß√£o (CAIXA ALTA negativa), Advert√™ncia ("N√£o recomendo"); **Sarcasmo/Ironia/Deboche (Ex: "@itau S√£o 86 anos de Alquimia!...Pedra Filosofal!", "Que √≥timo, o app caiu de novo", "Acho uma afronta mostrar quanto a gente gasta... üòÇ", "aiii deixa s√≥ o ita√∫ ver o cachorro quente...", "Muquirana que gasta tudo...", "puts a casa caiu")**; **Provoca√ß√£o/Compara√ß√£o negativa com concorrente (Ex: "@abibfilho na d√∫vida vou chamar o @bancodobrasil...")**; **Acusa√ß√£o/Den√∫ncia (Ex: "#√âTudoGolpeDessaMiseravelüëπ", "BANCO ITA√ö SE RECUSA A PAGAR...", "Cancelando minha conta, Absurdo nao comprir uma ordem judicial...", "A propaganda e bonita, mas na pr√°tica? O que est√£o fazendo?", "Cala boca itau", "e fria] o banco nao procura vc]", "Pior banco da vida!!!!!! Mais de tr√™s meses para a libera√ß√£o...", "‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏èN√ÉO USEM O BANCO ITA√ö! ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è Dia 09/04/25 meu pai sofreu um sequestro...", "@leanvsz @itau se pronuncie", "@itau qual √© o problema em liberar o dinheiro...", "Que merda hein itauzinho?", "Que situa√ß√£o, bloqueou o dinheiro...", "Acho que o Ita√∫ deve ter gastado...", "Verdade,@ Ita√∫ principalmente de voc√™s que enganam com cons√≥rcio", "Quando v√£o tomar uma atitude...", "Est√£o fazendo cliente de ref√©m?????", "Cad√™ o dinheiro do Rodrigo Constantino???", "O que falta para liberar a conta...", "Este banco este deixando o #rodrigoconstantino morrer...", "Roubando dinheiro do Constantino????", "Ita√∫ libera o dinheiro...", "Gastaram o $$$ do Constantino????", "Quem for de direita tem o dever de encerrar...", "Cancelando minha conta no Ita√∫!!!!", "Devolvam o $$$$ do #rodrigoconstantino !!!!!", "T√° na hora de tirar o patroc√≠nio da CBF...", "@itau por que n√£o liberaram o dinheiro...", "CANCELANDO na semana que vem minha contra Ita√∫ empresas...", "Desbloqueiem a conta do @rodrigoconstantino...", "E o $$$ do Constantino????? Comeram???", "Se n√£o desbloquearem as contas...", "Que banco √© esse???? Militante tamb√©m?", "Ita√∫ agora √© parceira oficial da corrup√ß√£o.", "Quem financia bandido, vira c√∫mplice.", "Saia, esse banco vive de m√£os dadas com a corrup√ß√£o.", "Sai desse banco desumano...", "@goncaloassisbrasil esse banco Ita√∫ √© terr√≠vel")**, **Pedido de cancelamento expl√≠cito ("Cancelei com sussesso")**, **Coment√°rios depreciativos vagos ("AQUELA TIPICA RICA NOJENTA...", "Pobre")**, **Perguntas acusat√≥rias/ret√≥ricas sobre problemas graves ou sens√≠veis (Ex: "Cad√™ meus rendimentos que estavam no ITI?")**, **Mocking/Deboche (Ex: "KKKKKK QUEM TE COMHECE?", "Carai, parece uma entidade ...kkk")**. Emojis claramente negativos (üò†, üò°, üëé, üò¢, üí©, ü§Æ, ü§¢, üò™). Coment√°rios sobre pol√≠tica/governo associados negativamente ao banco. Afirma√ß√£o "Bom, mas..." (Ex: "O banco Ita√∫ √© bom, mas o chat √© meio devagar...") -> Negativo. Reclama√ß√£o sobre spam ("N√ÉO QUERO RECEBER OFERTA DE CONSIGNADO."). Declara√ß√£o de problema/sentimento negativo ("Meu Deus se eu olhar o meu ü§¶üèª‚Äç‚ôÄÔ∏èü•≤", "Pequenos gastos, grandes preju√≠zos üòÖ", "E consegui dormir com fome?").

3.	Neutro: Busca/fornece informa√ß√£o, observa√ß√£o factual, **pergunta** (mesmo sobre problemas simples), **sugest√£o**, **pedido**, express√£o de equil√≠brio, **relato de experi√™ncia sem forte val√™ncia P/N**, ou rea√ß√£o amb√≠gua. **Pedidos/Sugest√µes/Perguntas s√£o GERALMENTE Neutros, mesmo com emojis positivos/negativos leves se o foco for o pedido/pergunta.**
    *   Indicadores: **Perguntas objetivas/informativas/sobre problemas simples ("Como fa√ßo?", "Quando ter√°?", "O que isso tem a ver?", "@itau @jorgebenjor divo o app de vcs ta fora do ar?" [simples], "@itau oloko ele ainda t√° vivo?", "@itau Os ruanistas?", "@cabedelos show em cabedelo*", "Pera,isso √© pra mim saber ou eles?")**; Respostas a perguntas; **Pedidos/Sugest√µes diretas ("@itau Aumenta meu limite üëç", "@itau tragam #technotronic", "Me da dinheiro kkkk", "Me da um empregoüôè", "@itau Ita√∫ ? Faz uma publi...", "@itau ITA√ö ME LEVA PRO THE TOWN", "@tatinhagrassi pede pra ele...", "@itau, ajuda n√≥s que somos clientes Uniclass...", "Oferece o recovery @itau !!!", "@itau direct responder l√°", "Preciso de ajuda", "@itau quando tu vai lan√ßar a boa com um CDB...")**; Express√µes de equil√≠brio ("Ok", "0 sigo a vida com propagandas mesmo üòÖ", "N√£o gasto nada.", "Assinaturas n√£o quer dizer...", "TODAS AS VEZES QUE ABRIREM UMA AG√äNCIA, ABRAM UMA S√ì PARA IDOSOS...", "N√£o devo nada."); **Relato de experi√™ncia sem forte val√™ncia P/N ("Sim mano, uso todo streaming...", "to precisando disso", "to precisando desse controle...", "Sou cliente Ita√∫", "EU sou cliente Ita√∫", "Parei de ver em roupinha pra o pet. üòÇ", "Isso que d√° pensar entre comprar uma moto e um sapato...")**. Observa√ß√µes factuais/neutras ("O Rock in Rio √© patrocinado", "Entendido", "Les alchimistes", "Ainda bem que n√£o gosto de caf√© üòÇ", "Juntando todas üòÇüòÇüòÇ", "Meu perfil de compras √© aquele que de fato compra üòÇ", "Kkkkk o meu foi os cafezinhos mesmo", "se for o caf√©zinho da Deola, √© o dobro"); **@Respostas vagas sem forte tom positivo/negativo (Ex: `@gabirichard eu tbem`, `@icaro.__ fort√≠ssimo`, `@icaro.__ vemvem`, `@mendes_isabella ser√°√£n?`, `@jorgediegopeixoto oi Jorge...`, `@jose07.dias o mlk q fala isso kkkk`, `@peraltamariane mulher n√£o estraga a publi...`)**. Emojis amb√≠guos padr√£o isolados (üôè, ü§î, üëÄ, `[üëàüòÄüëà]`); Termos/siglas ("ESG"). Avisos/Declara√ß√µes factuais ("@itau JORGE BEN JOR NAO DEIXE A POLITICA TE USAR", "N√£o conhe√ßo esse pa√≠s").

=== DEFINI√á√ïES DE TEMA (Escolha UMA - Aplicar Regras de Prioridade Abaixo, SOMENTE SE N√ÉO FOR NC) ===
***IMPORTANTE: Use EXATAMENTE um dos nomes de Tema 1 a 9 abaixo. Se Sentimento = N√£o Classificado, Tema = N√£o Classificado (Tema).***

1.	Marca e Imagem: Percep√ß√£o geral da marca Ita√∫ ou submarcas, reputa√ß√£o, campanhas institucionais, patroc√≠nios gerais. Cr√≠ticas/elogios gen√©ricos ao banco. Inten√ß√£o de abrir/cancelar conta sem motivo espec√≠fico. (Sentimento: P/N/Neutro)
2.	Produtos e Servi√ßos (Geral): Sobre cart√µes, contas, seguros, investimentos (CDB, LCI, √≠on), cr√©dito (consignado, financiamento), taxas, limites, benef√≠cios, portabilidade, cons√≥rcio, esp√≥lio. (Sentimento: P/N/Neutro)
3.	Atendimento e Suporte: Sobre canais (ag√™ncia, telefone, chat, SAC, Ouvidoria), qualidade do suporte, resolu√ß√£o de problemas pelo atendimento, demora, falta de retorno. (Sentimento: P/N/Neutro)
4.	Plataformas Digitais (App/Site/ATM): Feedback sobre usabilidade, design, funcionalidades (PIX, TED, DOC, login, reconhecimento facial, cofrinho, controle de gastos), performance/disponibilidade de app, site, caixas eletr√¥nicos. (Sentimento: P/N/Neutro)
5.	Figuras P√∫blicas e Representantes: Foco em atletas, influenciadores, creators, "laranjinhas", executivos, artistas (Jorge Ben Jor, Julia Iorio, Ari Segatto, Fran) associados a campanhas ou √† marca. Coment√°rios sobre o desempenho/influ√™ncia deles na campanha. (Sentimento: P/N/Neutro)
6.	Eventos e Campanhas Espec√≠ficas: Discuss√µes focadas em evento/campanha nomeado (Rock in Rio, The Town, Mapa Gastal), log√≠stica, experi√™ncia, tema. (Sentimento: P/N/Neutro)
7.	Seguran√ßa e Fraude: Sobre golpes, fraudes (sequestro, Pix indevido), seguran√ßa da conta, phishing, roubos, cobran√ßas indevidas percebidas como erro grave/golpe, bloqueio de contas/recursos (caso Constantino). (Sentimento: Geralmente Negativo, pode ser Neutro)
8.	**Solicita√ß√£o/D√∫vida/Sugest√£o (Transversal):** Prioridade m√©dia. Usar quando o FOCO PRINCIPAL da mensagem (Sentimento **Neutro**) √© uma pergunta, pedido ou sugest√£o sobre QUALQUER tema (produto, servi√ßo, evento, plataforma, atendimento, etc.). Ex: "App fora do ar?", "Aumenta meu limite", "Faz publi com Davi", "Liberem acesso sala VIP", "Direct responder l√°". (Sentimento: **Neutro**)
9.	**Intera√ß√£o Social e Engajamento:** Prioridade M√çNIMA. Usar SOMENTE para: **Men√ß√£o a usu√°rio isolada (@username) - SEMPRE Positivo**; **@Respostas vagas (sem pergunta/pedido/sugest√£o/cr√≠tica/elogio direto ao Ita√∫/campanha) - Geralmente Neutro (Ex: `@gabirichard eu tbem`) ou Positivo (Ex: `@rafabarrosr aaaaa feliz demais üß°`)**; Emojis P/N/Neutro ISOLADOS sem outro tema claro. (Sentimento: Conforme caso).
10.	N√£o Classificado (Tema): Exclusivamente quando Sentimento = N√£o Classificado.

=== REGRAS DE PRIORIDADE PARA TEMAS (Aplicar SOMENTE SE N√ÉO FOR NC) ===
Aplique na seguinte ordem. Se a mensagem se encaixar em m√∫ltiplos temas, escolha o primeiro da lista que se aplicar:
1.	Seguran√ßa e Fraude: (Prioridade M√°xima) Se mencionar golpe, fraude, seguran√ßa, bloqueio de contas/recursos, cobran√ßa indevida grave.
2.	Plataformas Digitais (App/Site/ATM): Se o feedback (P/N/Neutro - *exceto se for S√ì pergunta/pedido/sugest√£o*) for especificamente sobre essas plataformas (app fora do ar, PIX n√£o funciona, usabilidade, controle de gastos no app).
3.	Atendimento e Suporte: Se o foco (P/N/Neutro - *exceto se for S√ì pergunta/pedido/sugest√£o*) for a intera√ß√£o com canais de atendimento (chat, SAC, ag√™ncia, gerente).
4.	Produtos e Servi√ßos (Geral): Se sobre caracter√≠sticas, taxas, contrata√ß√£o/cancelamento, limites, rendimentos, portabilidade de produtos/servi√ßos (conta, cart√£o, CDB, LCI, cr√©dito, cons√≥rcio, esp√≥lio). (P/N/Neutro - *exceto se for S√ì pergunta/pedido/sugest√£o*).
5.	**Solicita√ß√£o/D√∫vida/Sugest√£o (Transversal):** Se o foco principal for a pergunta/pedido/sugest√£o em si (Sentimento Neutro).
6.	Eventos e Campanhas Espec√≠ficas: Se claramente focado em um evento/campanha nomeado (Mapa Gastal, The Town).
7.	Figuras P√∫blicas e Representantes: Se o foco principal for a pessoa/representante (elogio/cr√≠tica a Julia Iorio, Ari Segatto, Jorge Ben).
8.	Marca e Imagem: Para coment√°rios gerais sobre a marca/reputa√ß√£o/patroc√≠nios gerais ou cr√≠ticas/elogios vagos sem especificar produto/servi√ßo/canal/plataforma. Inten√ß√£o de abrir/cancelar conta.
9.	**Intera√ß√£o Social e Engajamento:** Para @username isolado (Positivo), @respostas vagas, emojis isolados. (Prioridade M√≠nima).
10.	N√£o Classificado (Tema): Apenas se Sentimento = N√£o Classificado.

=== INSTRU√á√ïES ADICIONAIS DE CLASSIFICA√á√ÉO ===
*   Formato de Resposta: EXATAMENTE DUAS LINHAS, SEMPRE:
    Sentimento: [Nome Exato da Categoria de Sentimento]
    Tema: [Nome Exato da Categoria de Tema]
    (N√£o inclua NADA MAIS).
*   **Priorize N√ÉO CLASSIFICADO:** Verifique TODAS as regras de NC primeiro. Se alguma aplicar, use NC/NC(Tema) e PARE.
*   Aplicar Prioridade de Tema: Se n√£o for NC, siga estritamente as regras de prioridade de tema.
*   Detectar Sarcasmo/Ironia/Deboche: Identificar (contradi√ß√µes, elogios exagerados, compara√ß√µes negativas, tom zombeteiro) e classificar como **Negativo**. Tema segue prioridade. Ex: "@itau S√£o 86 anos...", "@abibfilho na d√∫vida vou chamar o @bancodobrasil...", "Acho uma afronta mostrar... üòÇ".
*   **Men√ß√µes:** `@` isolado -> NC. `@username` isolado -> Positivo/Intera√ß√£o. `@` + texto claro -> Classificar pelo texto. `@` + texto vago/resposta -> Neutro/Intera√ß√£o ou Positivo/Intera√ß√£o (se claramente positivo). `@` + texto incompreens√≠vel -> NC.
*   Emojis: Emojis positivos em pedidos/sugest√µes/perguntas N√ÉO tornam o sentimento Positivo -> **Neutro**. Emojis negativos isolados -> Negativo/Intera√ß√£o. Emojis positivos isolados -> Positivo/Intera√ß√£o. Emojis neutros/risada isolados -> NC.
*   **Perguntas:** Informativas/Problemas simples -> **Neutro/Solicita√ß√£o ou Tema relevante**. Acusat√≥rias/Problemas graves/Repetitivas/Emocionais -> **Negativo/Tema relevante (Seguran√ßa, Atendimento, etc.)**.
*   √änfase (!!!, ???): Modifica/refor√ßa sentimento base. Isolado (`!!!!!!!!!!!!!!`) -> NC.
*   **Mensagens Mistas:** Classifique pelo elemento PREDOMINANTE/FOCO PRINCIPAL (Reclama√ß√£o/Problema Grave/Fraude/Sarcasmo > Elogio > Pergunta/Sugest√£o/Observa√ß√£o Neutra). Ex: Critica sertanejo mas elogia Ita√∫/Jorge Ben -> **Positivo / Figuras P√∫blicas ou Marca e Imagem**. Ex: "Banco bom, mas chat devagar" -> **Negativo / Atendimento e Suporte**.
*   "Absurdo": Se usado como g√≠ria de intensidade positiva (Ex: "dic√ß√£o absurda") -> Positivo. Se usado literalmente -> Negativo. Analisar contexto.

Agora, classifique a seguinte mensagem:
{comment}
"""


# --- Prompt para Gera√ß√£o de Insights ---
# ... (sem altera√ß√µes aqui, mantenha como estava)
prompt_geracao_insights = """
Persona: Voc√™ √© um Analista de Social Listening S√™nior, especializado no Banco Ita√∫ e seu ecossistema. Sua tarefa √© interpretar um resumo de dados de classifica√ß√£o de sentimentos e temas de coment√°rios de clientes/p√∫blico e gerar insights acion√°veis.

Contexto: Voc√™ recebeu um resumo da an√°lise de {total_comentarios_analisados} coment√°rios. As classifica√ß√µes foram feitas seguindo crit√©rios espec√≠ficos para o Ita√∫ (Sentimento: Positivo, Negativo, Neutro, NC; Temas: Marca, Produtos, Atendimento, Plataformas, Figuras P√∫blicas, Eventos, Seguran√ßa, Intera√ß√£o, Solicita√ß√£o, NC).

Dados de Resumo Fornecidos:
*   Distribui√ß√£o Geral de Sentimentos (Total: {total_comentarios_analisados}):
    - Positivo: {count_pos} ({perc_pos:.1f}%)
    - Negativo: {count_neg} ({perc_neg:.1f}%)
    - Neutro: {count_neu} ({perc_neu:.1f}%)
    - N√£o Classificado / Erros: {count_nc_err} ({perc_nc_err:.1f}%)
*   Top 5 Temas Mais Comentados (Excluindo Intera√ß√£o Social, NC e Erros. Total destes temas: {total_temas_insights}):
{top_temas_formatado}
*   Top 3 Temas Associados ao Sentimento NEGATIVO (Total de coment√°rios negativos com tema v√°lido: {total_temas_neg}):
{top_temas_negativos_formatado}

Tarefa: Com base EXCLUSIVAMENTE nos dados de resumo fornecidos acima, elabore um bloco conciso de "Insights e Percep√ß√µes Acion√°veis". Organize sua resposta usando os seguintes t√≥picos em Markdown:

### Principais Destaques Positivos:
*   (Comente a propor√ß√£o de coment√°rios positivos. Se houver dados nos Top Temas, relacione o sentimento positivo a algum tema espec√≠fico, se poss√≠vel inferir indiretamente. Ex: "Alto volume positivo pode estar ligado a X tema, se este for predominante.")

### Principais Pontos de Aten√ß√£o (Negativos):
*   (Comente a propor√ß√£o de coment√°rios negativos. **Crucialmente, foque nos 'Top 3 Temas Associados ao Sentimento NEGATIVO'**. Identifique as principais √°reas de reclama√ß√£o/cr√≠tica. Chame aten√ß√£o para poss√≠veis "telhados de vidro" ou problemas recorrentes nesses temas.)

### Oportunidades e Sugest√µes:
*   (Analise a propor√ß√£o de coment√°rios Neutros. Se o tema 'Solicita√ß√£o/D√∫vida/Sugest√£o' aparecer nos Top Temas, indique oportunidade de esclarecimento ou melhoria com base no alto volume de perguntas/pedidos. Se temas negativos recorrentes aparecerem, sugira investiga√ß√£o ou a√ß√£o espec√≠fica para mitigar.)

### Observa√ß√µes Gerais:
*   (Fa√ßa um balan√ßo geral. Comente se a distribui√ß√£o de sentimentos parece saud√°vel ou preocupante. Mencione se a propor√ß√£o de 'N√£o Classificado/Erros' √© alta, indicando poss√≠veis problemas na coleta ou classifica√ß√£o - *uma % alta de NC ap√≥s este refinamento pode indicar muitos coment√°rios realmente sem contexto/off-topic ou necessidade de mais ajustes*). Destaque algum tema espec√≠fico que dominou a conversa, se for o caso.)

Instru√ß√µes Adicionais:
*   Seja direto e focado em insights que possam gerar a√ß√µes para o Ita√∫.
*   Baseie-se APENAS nos dados fornecidos no resumo. N√£o invente informa√ß√µes ou temas n√£o listados.
*   Se algum dado crucial estiver faltando ou for insuficiente (ex: muito poucos coment√°rios negativos para tirar conclus√µes sobre temas negativos), mencione essa limita√ß√£o.
*   Mantenha a linguagem profissional e anal√≠tica.
*   Use bullet points (*) para listar os insights dentro de cada t√≥pico.
"""


# --- Listas de Categorias V√°lidas ---
categorias_sentimento_validas = ["Positivo", "Negativo", "Neutro", "N√£o Classificado"]
categorias_tema_validas = [
    "Marca e Imagem",
    "Produtos e Servi√ßos (Geral)",
    "Atendimento e Suporte",
    "Plataformas Digitais (App/Site/ATM)",
    "Figuras P√∫blicas e Representantes",
    "Eventos e Campanhas Espec√≠ficas",
    "Seguran√ßa e Fraude",
    "Solicita√ß√£o/D√∫vida/Sugest√£o (Transversal)",
    "Intera√ß√£o Social e Engajamento",
    "N√£o Classificado (Tema)"
]
categorias_erro = ["Erro Parsing", "Erro API"]
categorias_erro_tema_especifico = ["Erro API (Timeout)", "Erro API (Geral)", "Erro API (Modelo n√£o iniciado)", "Erro API (Conte√∫do Bloqueado)"]
todas_categorias_erro = list(set(categorias_erro + categorias_erro_tema_especifico))
categorias_excluir_sentimento = ["N√£o Classificado"] + todas_categorias_erro
categorias_excluir_tema = ["N√£o Classificado (Tema)", "Intera√ß√£o Social e Engajamento"] + todas_categorias_erro


# --- Fun√ß√£o para Analisar um Coment√°rio ---
# ... (L√≥gica interna da fun√ß√£o permanece a mesma) ...
def analisar_comentario(comentario, modelo_gemini):
    if not comentario or not isinstance(comentario, str) or comentario.strip() == "": return "N√£o Classificado", "N√£o Classificado (Tema)"
    if not modelo_gemini: return "Erro API", "Erro API (Modelo n√£o iniciado)"
    prompt_com_comentario = seu_prompt_completo.format(comment=comentario)
    try:
        safety_settings = { "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE", "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE", "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE", "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE" }
        request_options = {"timeout": 60}
        response = modelo_gemini.generate_content( prompt_com_comentario, safety_settings=safety_settings, request_options=request_options )
        texto_resposta = response.text.strip(); sentimento_extraido = "Erro Parsing"; tema_extraido = "Erro Parsing"; linhas = texto_resposta.split('\n')
        for linha in linhas:
            linha_strip = linha.strip()
            if linha_strip.lower().startswith("sentimento:"): sentimento_extraido = linha_strip.split(":", 1)[1].strip()
            elif linha_strip.lower().startswith("tema:"): tema_extraido = linha_strip.split(":", 1)[1].strip()
        if sentimento_extraido == "Erro Parsing" or tema_extraido == "Erro Parsing": return "Erro Parsing", "Erro Parsing"
        if sentimento_extraido not in categorias_sentimento_validas: return "Erro Parsing", "Erro Parsing"
        if sentimento_extraido == "N√£o Classificado": return "N√£o Classificado", "N√£o Classificado (Tema)"
        else:
             if tema_extraido not in categorias_tema_validas or tema_extraido == "N√£o Classificado (Tema)": return sentimento_extraido, "Erro Parsing"
             else: return sentimento_extraido, tema_extraido
    except genai.types.StopCandidateException as e: return "Erro API", "Erro API (Conte√∫do Bloqueado)"
    except Exception as e:
        error_type = "Erro API (Geral)"; error_message = str(e).lower()
        if "timeout" in error_message or "deadline exceeded" in error_message: error_type = "Erro API (Timeout)"
        return "Erro API", error_type

# --- Fun√ß√£o para Gerar Insights ---
# ... (L√≥gica interna da fun√ß√£o permanece a mesma) ...
def gerar_insights(df_resultados_func, modelo_gemini):
    if df_resultados_func is None or df_resultados_func.empty: return "N√£o h√° dados suficientes para gerar insights."
    if not modelo_gemini: return "*Erro: Modelo Gemini n√£o inicializado. N√£o √© poss√≠vel gerar insights.*"
    try:
        total_analisados_func = len(df_resultados_func); sent_counts_total = df_resultados_func['Sentimento_Classificado'].value_counts(); count_pos_func = sent_counts_total.get('Positivo', 0); count_neg_func = sent_counts_total.get('Negativo', 0); count_neu_func = sent_counts_total.get('Neutro', 0); count_nc_err_func = total_analisados_func - (count_pos_func + count_neg_func + count_neu_func); perc_pos_func = (count_pos_func / total_analisados_func * 100) if total_analisados_func > 0 else 0; perc_neg_func = (count_neg_func / total_analisados_func * 100) if total_analisados_func > 0 else 0; perc_neu_func = (count_neu_func / total_analisados_func * 100) if total_analisados_func > 0 else 0; perc_nc_err_func = (count_nc_err_func / total_analisados_func * 100) if total_analisados_func > 0 else 0; df_tema_insights = df_resultados_func[~df_resultados_func['Tema_Classificado'].isin(categorias_excluir_tema)].copy(); tema_counts_insights = df_tema_insights['Tema_Classificado'].value_counts(); top_temas_formatado_func = ""; total_temas_insights_func = 0
        if not tema_counts_insights.empty: total_temas_insights_func = tema_counts_insights.sum(); top_temas_formatado_func = "\n".join([ f"    - {tema}: {count} ({count / total_temas_insights_func * 100:.1f}%)" for tema, count in tema_counts_insights.head(5).items()]) if total_temas_insights_func > 0 else "    - Nenhum tema relevante classificado."
        else: top_temas_formatado_func = "    - Nenhum tema relevante classificado."
        df_negativos = df_resultados_func[df_resultados_func['Sentimento_Classificado'] == 'Negativo'].copy(); df_negativos_filtrados = df_negativos[~df_negativos['Tema_Classificado'].isin(categorias_excluir_tema)]; tema_neg_counts = df_negativos_filtrados['Tema_Classificado'].value_counts(); top_temas_negativos_formatado_func = ""; total_temas_neg_func = 0
        if not tema_neg_counts.empty: total_temas_neg_func = tema_neg_counts.sum(); top_temas_negativos_formatado_func = "\n".join([ f"    - {tema}: {count} ({count / total_temas_neg_func * 100:.1f}%)" for tema, count in tema_neg_counts.head(3).items()]) if total_temas_neg_func > 0 else "    - Nenhum tema negativo relevante classificado."
        else: top_temas_negativos_formatado_func = "    - Nenhum tema negativo relevante classificado (ou nenhum coment√°rio negativo com tema v√°lido)."
        prompt_final_insights = prompt_geracao_insights.format(total_comentarios_analisados=total_analisados_func, count_pos=count_pos_func, perc_pos=perc_pos_func, count_neg=count_neg_func, perc_neg=perc_neg_func, count_neu=count_neu_func, perc_neu=perc_neu_func, count_nc_err=count_nc_err_func, perc_nc_err=perc_nc_err_func, total_temas_insights=total_temas_insights_func, top_temas_formatado=top_temas_formatado_func, total_temas_neg=total_temas_neg_func, top_temas_negativos_formatado=top_temas_negativos_formatado_func)
        safety_settings = { "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE", "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE", "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE", "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE"}; request_options = {"timeout": 90}
        response_insights = modelo_gemini.generate_content(prompt_final_insights, safety_settings=safety_settings, request_options=request_options)
        if response_insights and hasattr(response_insights, 'text'): st.session_state.insights_generated = response_insights.text.strip(); return st.session_state.insights_generated
        else: error_info = "Resposta da API vazia ou inv√°lida."; # ...(c√≥digo de tratamento de erro igual)...
        if response_insights and hasattr(response_insights, 'prompt_feedback'): error_info = f"Poss√≠vel bloqueio pela API. Feedback: {response_insights.prompt_feedback}"
        st.warning(f"N√£o foi poss√≠vel gerar insights: {error_info}", icon="‚ö†Ô∏è"); st.session_state.insights_generated = f"*N√£o foi poss√≠vel gerar insights: {error_info}*"; return st.session_state.insights_generated
    except Exception as e: st.error(f"Erro durante a gera√ß√£o de insights: {e}", icon="üö®"); st.session_state.insights_generated = f"*Ocorreu um erro inesperado durante a gera√ß√£o dos insights: {str(e)}*"; return st.session_state.insights_generated

# --- Interface Principal ---
st.title("üìä Aplicativo para an√°lise de sentimento e tem√°tica automatizado por IA")
# Texto Introdut√≥rio ATUALIZADO
st.markdown("""
Este aplicativo utiliza a IA Generativa do Google (Gemini) para classificar e analisar automaticamente o **sentimento**, **tem√°tica** e gerar **insights** dos coment√°rios.
Desenvolvido pelo time de Social Intelligence do Hub de Inova√ß√£o da iHouse/Oliver para o Ita√∫.
""")
st.markdown("---")

# --- Controles na Barra Lateral ---
st.sidebar.divider()
st.sidebar.header("Controles")
uploaded_file = st.sidebar.file_uploader(
    "1. Escolha o arquivo (.csv ou .xlsx)", type=["csv", "xlsx"], key="file_uploader",
    help="Fa√ßa upload de um arquivo CSV ou Excel que contenha uma coluna chamada 'Conte√∫do' com os textos a serem analisados."
)

# Nome da Coluna ATUALIZADO para 'Conte√∫do' (C mai√∫sculo)
coluna_conteudo = 'Conte√∫do'

botao_habilitado = st.session_state.get('api_key_configured', False) and uploaded_file is not None
analisar_btn = st.sidebar.button( "2. Analisar Coment√°rios", key="analyze_button", disabled=(not botao_habilitado), help="Clique para iniciar a an√°lise dos coment√°rios na coluna 'Conte√∫do' do arquivo carregado.")
if not st.session_state.get('api_key_configured', False): st.sidebar.warning("API Key do Google n√£o configurada ou inv√°lida.", icon="‚ö†Ô∏è")
if not uploaded_file: st.sidebar.info("Aguardando upload do arquivo...", icon="üì§")
if botao_habilitado: st.sidebar.info("Pronto para analisar!", icon="‚úÖ")


# --- √Årea Principal: Pr√©-visualiza√ß√£o e Resultados ---
df_original = None; df_para_analise = None; total_comentarios_para_analisar = 0
if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.csv'):
            try: df_original = pd.read_csv(uploaded_file)
            except UnicodeDecodeError: uploaded_file.seek(0); df_original = pd.read_csv(uploaded_file, encoding='latin1')
            # Adicional: Tentar detectar separador se a leitura falhar inicialmente
            except pd.errors.ParserError:
                 uploaded_file.seek(0)
                 st.warning("N√£o foi poss√≠vel ler o CSV com ',', tentando com ';'", icon="‚ö†Ô∏è")
                 try: df_original = pd.read_csv(uploaded_file, sep=';')
                 except UnicodeDecodeError: uploaded_file.seek(0); df_original = pd.read_csv(uploaded_file, sep=';', encoding='latin1')
                 except Exception as inner_e: st.error(f"Erro ao tentar ler CSV com ';': {inner_e}", icon="üö®"); df_original = None

        else: df_original = pd.read_excel(uploaded_file)

        # Verifica se a coluna 'Conte√∫do' existe
        if df_original is not None and coluna_conteudo not in df_original.columns:
            st.error(f"Erro Cr√≠tico: Coluna '{coluna_conteudo}' n√£o encontrada no arquivo '{uploaded_file.name}'. Verifique o nome da coluna (deve ser 'Conte√∫do' com C mai√∫sculo).", icon="üö®")
            df_original = None # Impede processamento adicional
        elif df_original is not None:
            # Prepara o DataFrame para an√°lise: remove linhas com conte√∫do vazio/nulo
            df_para_analise = df_original.copy()
            df_para_analise.dropna(subset=[coluna_conteudo], inplace=True)
            df_para_analise = df_para_analise[df_para_analise[coluna_conteudo].astype(str).str.strip() != '']
            total_comentarios_para_analisar = len(df_para_analise)

            # Mostra pr√©-visualiza√ß√£o dos dados originais
            st.subheader("Pr√©-visualiza√ß√£o dos dados originais:")
            st.dataframe(df_original.head(10), use_container_width=True)
            if total_comentarios_para_analisar < len(df_original):
                 st.info(f"Total de linhas no arquivo: {len(df_original)}. Total de coment√°rios v√°lidos para an√°lise (coluna '{coluna_conteudo}' n√£o vazia): **{total_comentarios_para_analisar}**", icon="‚ÑπÔ∏è")
            else:
                 st.info(f"Total de coment√°rios v√°lidos para an√°lise: **{total_comentarios_para_analisar}**", icon="‚ÑπÔ∏è")

    except Exception as e:
        st.error(f"Erro ao ler ou processar o arquivo '{uploaded_file.name}': {e}", icon="üö®")
        df_original = None; df_para_analise = None

results_container = st.container()

# --- L√≥gica de An√°lise ---
# ... (sem altera√ß√µes aqui) ...
if analisar_btn and df_para_analise is not None:
    if total_comentarios_para_analisar == 0: st.warning(f"Nenhum coment√°rio v√°lido encontrado na coluna '{coluna_conteudo}' para an√°lise.", icon="‚ö†Ô∏è")
    elif not model: st.error("Erro: Modelo Gemini n√£o inicializado. Verifique a configura√ß√£o da API Key na barra lateral.", icon="üö®")
    else:
        st.session_state.analysis_done = False; st.session_state.df_results = None; st.session_state.insights_generated = None
        with st.spinner(f"Analisando {total_comentarios_para_analisar} coment√°rios... Isso pode levar alguns minutos."):
            progress_bar = st.progress(0.0); status_text = st.empty(); resultados_sentimento = []; resultados_tema = []; df_copy_analise = df_para_analise.copy(); start_time = time.time()
            for i, comentario in enumerate(df_copy_analise[coluna_conteudo]):
                sentimento, tema = analisar_comentario(str(comentario), model); resultados_sentimento.append(sentimento); resultados_tema.append(tema); progresso = (i + 1) / total_comentarios_para_analisar; progress_bar.progress(progresso); status_text.text(f"Analisando: {i+1}/{total_comentarios_para_analisar} ({progresso:.1%})")
            end_time = time.time(); tempo_total = end_time - start_time; progress_bar.empty(); status_text.success(f"‚úÖ An√°lise conclu√≠da em {tempo_total:.2f} segundos!", icon="üéâ")
            df_copy_analise['Sentimento_Classificado'] = resultados_sentimento; df_copy_analise['Tema_Classificado'] = resultados_tema; st.session_state.df_results = df_copy_analise; st.session_state.analysis_done = True

# --- Exibi√ß√£o dos Resultados ---
# ... (sem altera√ß√µes no c√≥digo de exibi√ß√£o: gr√°ficos, tabelas, download, insights) ...
if st.session_state.analysis_done and st.session_state.df_results is not None:
    with results_container:
        df_results = st.session_state.df_results; total_analisados_results = len(df_results); st.markdown("---"); st.subheader("Visualiza√ß√£o dos Resultados")
        df_sent_chart = df_results[~df_results['Sentimento_Classificado'].isin(categorias_excluir_sentimento)].copy(); sent_counts_chart = df_sent_chart['Sentimento_Classificado'].value_counts(); total_sent_chart = sent_counts_chart.sum(); nps_score_num = None
        if total_sent_chart > 0: count_pos_chart = sent_counts_chart.get('Positivo', 0); count_neg_chart = sent_counts_chart.get('Negativo', 0); perc_pos_chart = count_pos_chart / total_sent_chart; perc_neg_chart = count_neg_chart / total_sent_chart; nps_formula_standard = ((perc_pos_chart - perc_neg_chart) + 1) / 2 * 10; nps_score_num = max(0, min(10, nps_formula_standard))
        nps_col, chart_col1, chart_col2 = st.columns([1, 2, 2])
        with nps_col: st.markdown("##### NPS Social"); st.metric(label="(Escala 0-10)", value=f"{nps_score_num:.1f}" if nps_score_num is not None else "N/A"); st.caption("Sem dados P/N/Neu." if nps_score_num is None else "")
        with chart_col1:
            st.markdown("##### Distribui√ß√£o de Sentimento")
            if total_sent_chart > 0:
                df_plot_sent = pd.DataFrame({'Sentimento': sent_counts_chart.index, 'Volume': sent_counts_chart.values}); df_plot_sent['Sentimento'] = pd.Categorical(df_plot_sent['Sentimento'], categories=["Positivo", "Neutro", "Negativo"], ordered=True); df_plot_sent = df_plot_sent.sort_values('Sentimento')
                fig_sent = px.pie(df_plot_sent, names='Sentimento', values='Volume', hole=0.4, color='Sentimento', color_discrete_map={'Positivo': '#28a745', 'Negativo': '#dc3545', 'Neutro': '#ffc107'}, title='Sentimentos (Excluindo N√£o Classif./Erros)')
                fig_sent.update_traces(textposition='outside', textinfo='percent+label', hovertemplate="<b>%{label}</b><br>Volume: %{value}<br>Percentual: %{percent:.1%}<extra></extra>"); fig_sent.update_layout(showlegend=False, title_x=0.5, height=350, margin=dict(l=10, r=10, t=40, b=10)); st.plotly_chart(fig_sent, use_container_width=True)
            else: st.warning("Nenhum sentimento Positivo, Negativo ou Neutro classificado para exibir gr√°fico.", icon="üìä")
        with chart_col2:
            st.markdown("##### Distribui√ß√£o Tem√°tica")
            df_tema_chart = df_results[~df_results['Tema_Classificado'].isin(categorias_excluir_tema)].copy(); tema_counts_chart = df_tema_chart['Tema_Classificado'].value_counts(); total_tema_chart = tema_counts_chart.sum()
            if total_tema_chart > 0:
                tema_perc_chart = (tema_counts_chart / total_tema_chart * 100); df_plot_tema = pd.DataFrame({'Tema': tema_counts_chart.index, 'Volume': tema_counts_chart.values, 'Percentual': tema_perc_chart.values}).sort_values(by='Volume', ascending=False)
                fig_tema = px.bar(df_plot_tema, x='Tema', y='Volume', color_discrete_sequence=['#007bff']*len(df_plot_tema), title='Principais Temas (Excluindo NC/Erro/Intera√ß√£o)', hover_data={'Tema': False, 'Volume': True, 'Percentual': ':.1f%'}, text='Volume')
                fig_tema.update_traces(textposition='outside'); fig_tema.update_layout(xaxis_title=None, yaxis_title="Volume Bruto", title_x=0.5, height=350, margin=dict(l=10, r=10, t=40, b=10)); fig_tema.update_xaxes(tickangle= -30); st.plotly_chart(fig_tema, use_container_width=True)
            else: st.warning("Nenhum tema v√°lido (excluindo NC/Erro/Intera√ß√£o) classificado para exibir gr√°fico.", icon="üìä")

        st.markdown("---"); st.subheader("Tabelas de Resumo Completas"); col_t1, col_t2 = st.columns(2)
        with col_t1:
            st.markdown("###### Tabela 1: Sentimento (Completa)"); todas_cats_sent = categorias_sentimento_validas + sorted(list(set(todas_categorias_erro))); sent_counts_all = df_results['Sentimento_Classificado'].value_counts().reindex(todas_cats_sent, fill_value=0); sent_perc_all = (sent_counts_all / total_analisados_results * 100) if total_analisados_results > 0 else 0; tabela_sent = pd.DataFrame({'Sentimento': sent_counts_all.index, 'Volume Bruto': sent_counts_all.values, 'Percentual (%)': sent_perc_all.values}); total_row_sent = pd.DataFrame({'Sentimento': ['Total Geral'], 'Volume Bruto': [total_analisados_results], 'Percentual (%)': [100.0]}); tabela_sent_final = pd.concat([tabela_sent[tabela_sent['Volume Bruto'] > 0], total_row_sent], ignore_index=True); st.table(tabela_sent_final.style.format({'Percentual (%)': '{:.2f}%'}))
        with col_t2:
            st.markdown("###### Tabela 2: Tem√°tica (Completa)"); todas_cats_tema = categorias_tema_validas + sorted(list(set(todas_categorias_erro))); tema_counts_all = df_results['Tema_Classificado'].value_counts().reindex(todas_cats_tema, fill_value=0); tema_counts_all = tema_counts_all[~tema_counts_all.index.duplicated(keep='first')]; tema_perc_all = (tema_counts_all / total_analisados_results * 100) if total_analisados_results > 0 else 0; tabela_tema = pd.DataFrame({'Tema': tema_counts_all.index, 'Volume Bruto': tema_counts_all.values, 'Percentual (%)': tema_perc_all.values}); total_row_tema = pd.DataFrame({'Tema': ['Total Geral'], 'Volume Bruto': [total_analisados_results], 'Percentual (%)': [100.0]}); tabela_tema_final = pd.concat([tabela_tema[tabela_tema['Volume Bruto'] > 0], total_row_tema], ignore_index=True); st.table(tabela_tema_final.style.format({'Percentual (%)': '{:.2f}%'}))

        st.markdown("---"); st.subheader("Resultados Completos Detalhados"); st.dataframe(df_results, use_container_width=True)
        @st.cache_data
        def convert_df_to_csv(df_conv): return df_conv.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
        if uploaded_file: base_name = uploaded_file.name.split('.')[0]; download_filename = f"{base_name}_analise_gemini.csv"
        else: download_filename = 'analise_gemini_resultados.csv'
        csv_output = convert_df_to_csv(df_results)
        st.download_button(label="üíæ Download Resultados Completos (.csv)", data=csv_output, file_name=download_filename, mime='text/csv', key='download_csv', help="Baixa a tabela completa acima, incluindo as classifica√ß√µes de Sentimento e Tema, em formato CSV.")

        st.markdown("---"); st.subheader("üí° Insights e Percep√ß√µes Acion√°veis")
        if st.session_state.analysis_done and st.session_state.df_results is not None and model:
            if st.session_state.insights_generated is None:
                with st.spinner("Gerando insights com base nos resultados..."): gerar_insights(st.session_state.df_results, model)
            if st.session_state.insights_generated: st.markdown(st.session_state.insights_generated)
            else: st.warning("N√£o foi poss√≠vel gerar ou carregar os insights.", icon="‚ö†Ô∏è")
        elif not model: st.warning("Modelo Gemini n√£o inicializado. N√£o √© poss√≠vel gerar insights.", icon="‚ö†Ô∏è")
        else: st.info("Realize uma an√°lise primeiro para poder gerar os insights.", icon="‚ÑπÔ∏è")

elif not uploaded_file and not st.session_state.analysis_done :
     st.info("‚¨ÖÔ∏è Para come√ßar, configure sua API Key (se necess√°rio) e fa√ßa o upload de um arquivo .csv ou .xlsx na barra lateral.", icon="üëà")