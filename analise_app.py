import streamlit as st
import pandas as pd
import google.generativeai as genai
import io # Para lidar com o arquivo em mem√≥ria
import time # Para poss√≠veis pausas
import plotly.express as px # Para gr√°ficos
import numpy as np # Para c√°lculos num√©ricos (usado no NPS)

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    layout="wide",
    page_title="An√°lise de Sentimento e Tem√°tica - IH",
    page_icon="üìä"
)

# --- Inicializa√ß√£o do Estado da Sess√£o ---
if 'api_key_configured' not in st.session_state: st.session_state.api_key_configured = False
if 'api_key_input_value' not in st.session_state: st.session_state.api_key_input_value = ""
if 'analysis_done' not in st.session_state: st.session_state.analysis_done = False
if 'df_results' not in st.session_state: st.session_state.df_results = None

# --- Configura√ß√£o da API Key ---
api_key_source = None
try:
    if hasattr(st, 'secrets') and "GOOGLE_API_KEY" in st.secrets:
        st.session_state.api_key_input_value = st.secrets["GOOGLE_API_KEY"]
        api_key_source = "secrets"
except Exception as e: st.sidebar.warning(f"N√£o foi poss√≠vel ler os secrets: {e}")

# --- Interface da Barra Lateral para API Key ---
st.sidebar.header("Configura√ß√£o")
if api_key_source != "secrets":
    user_provided_key = st.sidebar.text_input(
        "Insira sua Google API Key aqui:", type="password",
        key="api_key_widget", value=st.session_state.api_key_input_value
    )
    if user_provided_key != st.session_state.api_key_input_value:
         st.session_state.api_key_input_value = user_provided_key; st.session_state.api_key_configured = False
else:
    st.sidebar.success("API Key carregada dos segredos!", icon="‚úÖ")
    if not st.session_state.api_key_configured: st.session_state.api_key_configured = False

# --- Tentativa de Configurar a API e o Modelo ---
model = None
if st.session_state.api_key_input_value and not st.session_state.api_key_configured:
    try:
        genai.configure(api_key=st.session_state.api_key_input_value)
        model = genai.GenerativeModel('gemini-1.5-flash')
        st.session_state.api_key_configured = True
        if api_key_source != "secrets": st.sidebar.success("API Key configurada!", icon="üîë")
        st.sidebar.caption(f"Modelo Gemini: gemini-1.5-flash")
    except Exception as e: st.sidebar.error(f"Erro API Key/Modelo. Verifique."); st.session_state.api_key_configured = False; model = None
elif st.session_state.api_key_configured:
     try: model = genai.GenerativeModel('gemini-1.5-flash')
     except Exception as e: st.sidebar.error(f"Erro Modelo: {e}"); st.session_state.api_key_configured = False; model = None

# --- Prompt REFINADO v3 (Ajuste em Men√ß√£o Isolada) ---
seu_prompt_completo = """
Persona: Voc√™ √© uma IA Analista de Feedback de Clientes e Social Listening de um banco Brasileiro, otimizada para classificar mensagens em Portugu√™s do Brasil (Pt-BR) com alta precis√£o contextual.
Objetivo: Classificar CADA mensagem em UMA categoria de Sentimento (Positivo, Negativo, Neutro, N√£o Classificado) e UMA categoria Tem√°tica. Aderir estritamente √†s defini√ß√µes e regras. Minimizar 'N√£o Classificado'.
Contexto Geral: Mensagens de clientes/p√∫blico sobre posts do banco (Ita√∫ e submarcas) e suas iniciativas (produtos, servi√ßos, campanhas, eventos, patroc√≠nios). Assuma que rea√ß√µes curtas s√£o contextuais ao post original.

=== REGRAS GERAIS E DE OURO ===
1.  An√°lise Dupla Obrigat√≥ria: Sentimento + Tema.
2.  Priorize P/N/Neutro: S√≥ use 'N√£o Classificado' como √öLTIMO recurso absoluto, conforme defini√ß√µes estritas abaixo.
3.  Vincula√ß√£o NC: Se Sentimento = N√£o Classificado, ent√£o Tema = N√£o Classificado (Tema). SEMPRE.
4.  **REGRA CR√çTICA - Men√ß√£o Isolada:** Uma mensagem contendo APENAS uma men√ß√£o de usu√°rio (ex: "@nomeusuario", "[nome usuario]") SEM NENHUM outro texto, n√∫mero ou emoji, DEVE SER CLASSIFICADA COMO: Sentimento: Positivo, Tema: Intera√ß√£o Social. Isso representa compartilhamento/engajamento.
5.  Formato de Resposta: EXATAMENTE DUAS LINHAS:
    Sentimento: [Nome Exato da Categoria de Sentimento]
    Tema: [Nome Exato da Categoria de Tema]
    (N√£o inclua NADA MAIS, nem explica√ß√µes, nem markdown).

=== DEFINI√á√ïES DE SENTIMENTO (Escolha UMA) ===

**Positivo:** Expressa satisfa√ß√£o, apoio, entusiasmo, gratid√£o, aprecia√ß√£o, concord√¢ncia.
    *   Indicadores: Elogios ("Amei", "Top", "√ìtimo banco"), agradecimentos ("Obg"), apoio ("Parab√©ns", "Torcendo"), aprecia√ß√£o ("Belo post"); Emojis positivos isolados ou dominantes (üòç, ‚ù§Ô∏è, üëç, üéâ, ‚ú®, üëè, üôè-gratid√£o, üòâ); **Men√ß√µes ESTRITAMENTE ISOLADAS (@usuario, [nome]) - Ver Regra Cr√≠tica 4 acima**; Textos curtos de concord√¢ncia ("Isso", "Exato"). √änfase (!!!!) pode ser Positiva se o tom geral for de excita√ß√£o/apoio.
    *   Ex: "Parab√©ns pela iniciativa!!!!", "@itau <0xF0><0x9F><0x91><0x8F>", "[Luiz Erik]" (como mensagem √∫nica), "üòâ"

**Negativo:** Expressa insatisfa√ß√£o, cr√≠tica, raiva, frustra√ß√£o, reclama√ß√£o, tristeza, relato de problema/golpe/erro.
    *   Indicadores: Cr√≠ticas ("P√©ssimo", "Lixo", "Decep√ß√£o"), reclama√ß√µes ("Atendimento horr√≠vel", "N√£o resolvem"), relatos de problemas ("App n√£o funciona", "Cobran√ßa indevida", "Fui roubado", "N√£o consigo acesso"), insatisfa√ß√£o ("Taxa alta", "Demora"), frustra√ß√£o (CAIXA ALTA com teor negativo, "!!!!" ap√≥s cr√≠tica), advert√™ncia ("N√£o recomendo"); Emojis negativos isolados ou dominantes (üò†, üò°, üëé, üò¢, ü§Æ, üí©). Qualquer men√ß√£o a golpe, fraude, roubo, erro grave √© Negativa.
    *   Ex: "P√©ssimo atendimento!!!!", "N√£o consigo usar o app.", "Fui v√≠tima de golpe @itau", "ü§Æ"

**Neutro:** Busca/fornece informa√ß√£o, observa√ß√£o factual, pergunta, sugest√£o objetiva, rea√ß√£o sem forte val√™ncia P/N.
    *   Indicadores: Perguntas ("Como fa√ßo?", "Qual o telefone?", "Quando come√ßa?"), pedidos ("Me ajuda", "Gostaria de..."), informa√ß√µes factuais ("O evento √© amanh√£"), sugest√µes ("Poderiam fazer X"), observa√ß√µes ("Entendi", "Ok"); Emojis neutros isolados ou dominantes (ü§î, üëÄ, üòÇ, üòÖ, üôè-"por favor"); **M√∫ltiplas men√ß√µes isoladas** (@itau @outro). Frases que iniciam pergunta/pedido ap√≥s men√ß√£o (@itau Qual o hor√°rio?). Termos/siglas espec√≠ficos sobre o t√≥pico sem ju√≠zo de valor ("Faz o L", "ESG").
    *   Ex: "@itau Qual o endere√ßo?", "Acho que √© em SP", "Ok", "@itau @cliente Ol√°", "Faz o L"

**N√£o Classificado:** APLICAR SOMENTE E EXCLUSIVAMENTE SE (e NUNCA para men√ß√£o estritamente isolada):
    1.  **Idioma Estrangeiro:** Predominantemente n√£o em Pt-BR (Ex: "What time?", "@itau guess I").
    2.  **Incompreens√≠vel:** Erros graves, digita√ß√£o aleat√≥ria, texto sem sentido l√≥gico (Ex: "asdf ghjk", "..oitoitoitame"). Inclui letras/n√∫meros isolados sem contexto claro AP√ìS uma men√ß√£o ou isolados (Ex: "@itau p", "@2").
    3.  **Spam/Link Isolado:** Conte√∫do repetitivo √≥bvio, promo√ß√µes n√£o relacionadas, URL isolada SEM contexto relevante (Ex: "Confira: https://...", "https://t.co/xxxxx").
    4.  **Totalmente Off-Topic:** Assunto sem QUALQUER rela√ß√£o com banco, finan√ßas, campanha, evento, etc. (Ex: "Receita de bolo").
    5.  **Intera√ß√£o Social Pura ISOLADA (Texto/Emoji):** APENAS sauda√ß√µes textuais ("Bom dia"), APENAS risadas textuais ("kkkk"), APENAS emojis que n√£o se encaixam claramente em P/N/Neutro pelo contexto OU que n√£o s√£o men√ß√µes. (Se tiver "kkkk adorei", classifique "adorei").
    *   Ex: "Bom dia", "rsrsrs", "https://example.com", "jsjsjshshs", "<>", "**"

=== DEFINI√á√ïES DE TEMA (Escolha UMA, vinculada ao Sentimento) ===

***IMPORTANTE: Use EXATAMENTE um dos nomes de Tema 1 a 9 abaixo. Se Sentimento = N√£o Classificado, Tema = N√£o Classificado (Tema).***

1.  **Elogio Geral (Marca/Evento/Conte√∫do/Experi√™ncia):** Elogios sobre a marca, posts, eventos, experi√™ncia geral. (Sentimento: Positivo)
2.  **Elogio Espec√≠fico (Pessoa/Figura P√∫blica/Representante/"Laranjinha"):** Elogios a pessoas espec√≠ficas (Jorge Ben Jor, atletas, "laranjinhas"). (Sentimento: Positivo)
3.  **Reclama√ß√£o/Cr√≠tica (Servi√ßos/Produtos/Atendimento/Pol√≠ticas):** Reclama√ß√µes sobre atendimento, produtos (cart√£o, conta), taxas, pol√≠ticas, golpes, fraudes, seguran√ßa. (Sentimento: Negativo)
4.  **Problemas T√©cnicos (Plataformas/Funcionalidades):** Relatos de falhas em app, site, caixa eletr√¥nico, Pix, reconhecimento facial, etc. (Sentimento: Negativo)
5.  **Apoio/Incentivo (Pessoas/Causas/Marca):** Mensagens de apoio, torcida para pessoas, causas ou a marca/iniciativa. (Sentimento: Positivo)
6.  **Solicita√ß√£o/D√∫vida/Sugest√£o:** Perguntas, pedidos de informa√ß√£o/ajuda, sugest√µes sobre servi√ßos, produtos, eventos, etc. (Sentimento: Neutro)
7.  **Intera√ß√£o Social:** Usado para: **Men√ß√µes estritamente isoladas (@ ou []) classificadas como Positivo**; M√∫ltiplas men√ß√µes isoladas (classificadas como Neutro); Emojis isolados P/N/Neutro sem contexto tem√°tico forte; Intera√ß√µes curtas P/N/Neutro focadas na men√ß√£o (@itau vc). (Sentimento: Positivo, Negativo ou Neutro, NUNCA N√£o Classificado).
8.  **Discuss√£o Espec√≠fica (T√≥pico da Campanha/Evento):** Coment√°rios sobre o tema central do post/campanha/evento (m√∫sica, jogo, detalhe do evento, pessoa em destaque), incluindo observa√ß√µes factuais ou termos espec√≠ficos ("Faz o L"). (Sentimento: Pode ser Positivo, Negativo ou Neutro)
9.  **N√£o Classificado (Tema):** Exclusivamente quando Sentimento = N√£o Classificado. Engloba idioma estrangeiro, incompreens√≠vel, spam, off-topic, intera√ß√£o social pura isolada (texto/emoji, n√£o men√ß√£o). (Sentimento: N√£o Classificado)

=== REGRAS ADICIONAIS DE CLASSIFICA√á√ÉO ===
*   **Men√ß√µes + Texto:** O sentimento/tema deve seguir o TEXTO. Se o texto for claro (elogio, cr√≠tica, pergunta), use o sentimento/tema do texto. Se o texto for amb√≠guo/curto (ex: "@itau vc", "@itau aqui") que n√£o se encaixe em P/N/Neutro claros, classifique como **Positivo / Intera√ß√£o Social** (priorizando a inten√ß√£o de marcar).
*   **Emojis Mistos:** Prioridade: Negativo > Positivo > Neutro. (Ex: ü§î‚ù§Ô∏èüëé -> Negativo; ü§î‚ù§Ô∏èüëç -> Positivo; ü§îüëÄ -> Neutro).
*   **√änfase (!!!, ???):** Modifica o sentimento base, n√£o o define isoladamente. "√ìtimo!!!" -> Positivo. "P√©ssimo!!!" -> Negativo. "!!!!" isolado pode ser Positivo (excita√ß√£o) dependendo do contexto impl√≠cito do post.
*   **Mensagens Mistas:** Classifique pelo elemento PREDOMINANTE ou mais FORTE (Reclama√ß√£o > outros; Pergunta > outros).

Agora, analise a seguinte mensagem:
{comment}
"""

# --- Listas de Categorias V√°lidas ---
# (Mantidas como antes)
categorias_sentimento_validas = ["Positivo", "Negativo", "Neutro", "N√£o Classificado"]
categorias_tema_validas = [
    "Elogio Geral (Marca/Evento/Conte√∫do/Experi√™ncia)", "Elogio Espec√≠fico (Pessoa/Figura P√∫blica/Representante/\"Laranjinha\")",
    "Reclama√ß√£o/Cr√≠tica (Servi√ßos/Produtos/Atendimento/Pol√≠ticas)", "Problemas T√©cnicos (Plataformas/Funcionalidades)",
    "Apoio/Incentivo (Pessoas/Causas/Marca)", "Solicita√ß√£o/D√∫vida/Sugest√£o", "Intera√ß√£o Social",
    "Discuss√£o Espec√≠fica (T√≥pico da Campanha/Evento)", "N√£o Classificado (Tema)"
]
categorias_erro = ["Erro Parsing", "Erro API"]
categorias_erro_tema_especifico = ["Erro API (Timeout)", "Erro API (Geral)", "Erro API (Modelo n√£o iniciado)", "Erro API (Conte√∫do Bloqueado)"] # Adicionado bloqueio
todas_categorias_erro = list(set(categorias_erro + categorias_erro_tema_especifico))
categorias_excluir_sentimento = ["N√£o Classificado"] + todas_categorias_erro
categorias_excluir_tema = ["N√£o Classificado (Tema)"] + todas_categorias_erro


# --- Fun√ß√£o para Analisar um Coment√°rio (L√≥gica interna revisada ligeiramente para erros) ---
def analisar_comentario(comentario, modelo_gemini):
    """Envia um coment√°rio para a API Gemini e retorna o sentimento e tema classificados."""
    if not comentario or not isinstance(comentario, str) or comentario.strip() == "": return "N√£o Classificado", "N√£o Classificado (Tema)"
    if not modelo_gemini: return "Erro API", "Erro API (Modelo n√£o iniciado)"

    prompt_com_comentario = seu_prompt_completo.format(comment=comentario)
    try:
        safety_settings = { "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE", "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE",
                           "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE", "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE"}
        request_options = {"timeout": 60}
        response = modelo_gemini.generate_content(prompt_com_comentario, safety_settings=safety_settings, request_options=request_options)

        texto_resposta = response.text.strip(); sentimento_extraido = "Erro Parsing"; tema_extraido = "Erro Parsing"
        linhas = texto_resposta.split('\n')
        for linha in linhas:
            linha_strip = linha.strip()
            if linha_strip.lower().startswith("sentimento:"): sentimento_extraido = linha_strip.split(":", 1)[1].strip()
            elif linha_strip.lower().startswith("tema:"): tema_extraido = linha_strip.split(":", 1)[1].strip()

        if sentimento_extraido == "Erro Parsing" or tema_extraido == "Erro Parsing":
             # N√£o mostra warning para cada erro de parsing, pode poluir muito. Log interno talvez.
             # st.warning(f"Formato resp. inesperado '{comentario[:50]}...': '{texto_resposta}'", icon="‚ö†Ô∏è")
             return "Erro Parsing", "Erro Parsing"
        if sentimento_extraido not in categorias_sentimento_validas:
             # st.warning(f"Sent. inv√°lido '{sentimento_extraido}' retornado: '{comentario[:50]}...'", icon="‚ö†Ô∏è")
             return "Erro Parsing", "Erro Parsing"

        if sentimento_extraido == "N√£o Classificado":
            # Se IA retornar tema diferente de NC, auto-corrige silenciosamente.
            return "N√£o Classificado", "N√£o Classificado (Tema)"
        else: # Sentimento P/N/Neutro
             if tema_extraido not in categorias_tema_validas or tema_extraido == "N√£o Classificado (Tema)":
                  # st.warning(f"Tema inv√°lido '{tema_extraido}' p/ Sent='{sentimento_extraido}'. Msg:'{comentario[:50]}...'", icon="‚ö†Ô∏è")
                  return sentimento_extraido, "Erro Parsing" # Mantem sentimento, marca tema como erro
             else:
                  return sentimento_extraido, tema_extraido # OK

    except genai.types.StopCandidateException as e:
        # Captura especificamente erros de conte√∫do bloqueado pela safety settings
        # st.error(f"Erro API (Conte√∫do Bloqueado): '{comentario[:50]}...'.", icon="üö®") # Log silencioso talvez?
        return "Erro API", "Erro API (Conte√∫do Bloqueado)"
    except Exception as e:
        error_type = "Erro API (Geral)"
        if "timeout" in str(e).lower() or "Deadline exceeded" in str(e): error_type = "Erro API (Timeout)"
        # st.error(f"{error_type}: '{comentario[:50]}...'.", icon="üö®") # Log silencioso talvez?
        return "Erro API", error_type

# --- Interface Principal (Layout e L√≥gica de Exibi√ß√£o sem mudan√ßas) ---
# ... (O restante do c√≥digo continua igual ao da vers√£o anterior,
#      incluindo a exibi√ß√£o do t√≠tulo, subt√≠tulo, pr√©-visualiza√ß√£o,
#      l√≥gica de an√°lise em lote, c√°lculo de NPS, gr√°ficos e tabelas)
# ... (Copie e cole todo o restante do c√≥digo da resposta anterior aqui)

# --- Copie o restante do c√≥digo da Interface Principal daqui para baixo ---
st.title("üìä Aplicativo para an√°lise de sentimento e tem√°tica automatizado por IA")
st.markdown("Este aplicativo foi desenvolvido pelo time de Social Intelligence do Hub de Inova√ß√£o da Ihouse para o Ita√∫. As an√°lises s√£o realizadas e geradas atrav√©s do Gemini.")
st.markdown("---")

# --- Controles na Barra Lateral ---
st.sidebar.divider()
st.sidebar.header("Controles")
uploaded_file = st.sidebar.file_uploader("1. Escolha o arquivo (.csv ou .xlsx)", type=["csv", "xlsx"], key="file_uploader")
botao_habilitado = st.session_state.get('api_key_configured', False) and uploaded_file is not None
analisar_btn = st.sidebar.button("2. Analisar Coment√°rios", key="analyze_button", disabled=(not botao_habilitado))
if not st.session_state.get('api_key_configured', False): st.sidebar.warning("API Key n√£o configurada.")
if not uploaded_file: st.sidebar.info("Aguardando upload do arquivo...")

# --- √Årea Principal: Pr√©-visualiza√ß√£o e Resultados ---
df = None; total_comentarios_validos = 0
if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.csv'):
            try: df_original = pd.read_csv(uploaded_file)
            except UnicodeDecodeError: uploaded_file.seek(0); df_original = pd.read_csv(uploaded_file, encoding='latin1')
        else: df_original = pd.read_excel(uploaded_file)
        df = df_original.copy()
        if 'conte√∫do' not in df.columns: st.error("Erro Cr√≠tico: Coluna 'conte√∫do' n√£o encontrada."); df = None
        else:
            df.dropna(subset=['conte√∫do'], inplace=True); df = df[df['conte√∫do'].astype(str).str.strip() != '']
            total_comentarios_validos = len(df)
    except Exception as e: st.error(f"Erro ao ler o arquivo: {e}"); df = None

if df is not None:
    st.subheader("Pr√©-visualiza√ß√£o dos dados:")
    st.dataframe(df.head(10), use_container_width=True)
    st.info(f"Total de coment√°rios v√°lidos (n√£o vazios) encontrados: **{total_comentarios_validos}**")

    results_container = st.container()
    if analisar_btn:
        if total_comentarios_validos == 0: st.warning("Nenhum coment√°rio v√°lido para an√°lise.")
        elif not model: st.error("Erro: Modelo Gemini n√£o inicializado. Verifique a API Key.")
        else:
            with st.spinner(f"Analisando {total_comentarios_validos} coment√°rios... Isso pode levar alguns minutos."):
                progress_bar = st.progress(0); status_text = st.empty()
                resultados_sentimento = []; resultados_tema = []
                df_copy = df.copy()
                for i, comentario in enumerate(df_copy['conte√∫do']):
                    sentimento, tema = analisar_comentario(str(comentario), model)
                    resultados_sentimento.append(sentimento); resultados_tema.append(tema)
                    progresso = (i + 1) / total_comentarios_validos
                    progress_bar.progress(progresso); status_text.text(f"Analisando: {i+1}/{total_comentarios_validos}")
                progress_bar.empty(); status_text.success(f"‚úÖ An√°lise conclu√≠da!")
                df_copy['Sentimento_Classificado'] = resultados_sentimento; df_copy['Tema_Classificado'] = resultados_tema
                st.session_state.df_results = df_copy; st.session_state.analysis_done = True
                st.rerun()

    if st.session_state.analysis_done and st.session_state.df_results is not None:
        df_results = st.session_state.df_results
        total_analisados = len(df_results)

        with results_container:
            st.markdown("---")
            st.subheader("Visualiza√ß√£o dos Resultados")

            # --- C√°lculo para NPS e Gr√°ficos ---
            df_sent_chart = df_results[~df_results['Sentimento_Classificado'].isin(categorias_excluir_sentimento)].copy()
            sent_counts_chart = df_sent_chart['Sentimento_Classificado'].value_counts()
            total_sent_chart = sent_counts_chart.sum(); nps_score_num = None
            if total_sent_chart > 0:
                count_pos = sent_counts_chart.get('Positivo', 0); count_neu = sent_counts_chart.get('Neutro', 0); count_neg = sent_counts_chart.get('Negativo', 0)
                perc_pos = count_pos / total_sent_chart; perc_neu = count_neu / total_sent_chart; perc_neg = count_neg / total_sent_chart
                nps_score_num = max(0, min(10, ((perc_pos + (perc_neu * 0.5) - perc_neg) * 5) + 5))

            # --- Exibi√ß√£o do NPS e Gr√°ficos ---
            nps_col, chart_col1, chart_col2 = st.columns([1, 2, 2])
            with nps_col:
                st.markdown("##### NPS Social");
                if nps_score_num is not None: st.metric(label="(Escala 0-10)", value=f"{nps_score_num:.1f}")
                else: st.metric(label="(Escala 0-10)", value="N/A"); st.caption("Sem dados P/N/Neu.")
            with chart_col1:
                st.markdown("##### Distribui√ß√£o de Sentimento")
                if total_sent_chart > 0:
                    df_plot_sent = pd.DataFrame({'Sentimento': sent_counts_chart.index, 'Volume': sent_counts_chart.values})
                    fig_sent = px.pie(df_plot_sent, names='Sentimento', values='Volume', hole=0.4, color='Sentimento', color_discrete_map={'Positivo': '#28a745', 'Negativo': '#dc3545', 'Neutro': '#ffc107'}, title='Sentimentos (Excluindo N√£o Classif.)')
                    fig_sent.update_traces(textposition='inside', textinfo='percent+label', hovertemplate="<b>%{label}</b><br>Vol: %{value}<br>%: %{percent:.1%}<extra></extra>")
                    fig_sent.update_layout(showlegend=False, title_x=0.5, height=350, margin=dict(l=10, r=10, t=40, b=10)); st.plotly_chart(fig_sent, use_container_width=True)
                else: st.warning("Nenhum sentimento P/N/Neu classificado.")
            with chart_col2:
                st.markdown("##### Distribui√ß√£o Tem√°tica")
                df_tema_chart = df_results[~df_results['Tema_Classificado'].isin(categorias_excluir_tema)]
                tema_counts_chart = df_tema_chart['Tema_Classificado'].value_counts()
                total_tema_chart = tema_counts_chart.sum()
                if total_tema_chart > 0:
                    tema_perc_chart = (tema_counts_chart / total_tema_chart * 100)
                    df_plot_tema = pd.DataFrame({'Tema': tema_counts_chart.index, 'Volume': tema_counts_chart.values, 'Percentual': tema_perc_chart.values}).sort_values(by='Volume', ascending=False)
                    fig_tema = px.bar(df_plot_tema, x='Tema', y='Volume', color_discrete_sequence=['#FFA500']*len(df_plot_tema), title='Temas (Excluindo N√£o Classif.)', text=df_plot_tema.apply(lambda row: f"{row['Volume']}<br>({row['Percentual']:.1f}%)", axis=1))
                    fig_tema.update_traces(textposition='outside'); fig_tema.update_layout(xaxis_title=None, yaxis_title="Volume Bruto", title_x=0.5, height=350, margin=dict(l=10, r=10, t=40, b=10))
                    fig_tema.update_xaxes(tickangle= -45); st.plotly_chart(fig_tema, use_container_width=True)
                else: st.warning("Nenhum tema v√°lido classificado.")

            # --- Tabelas de Resumo ---
            st.markdown("---"); st.subheader("Tabelas de Resumo")
            col_t1, col_t2 = st.columns(2)
            with col_t1:
                st.markdown("###### Tabela 1: Sentimento (Completa)")
                # Inclui Erro API (Conte√∫do Bloqueado) na lista de erros
                todas_cats_sent = categorias_sentimento_validas + todas_categorias_erro
                sent_counts = df_results['Sentimento_Classificado'].value_counts().reindex(todas_cats_sent, fill_value=0)
                sent_perc = (sent_counts / total_analisados * 100).round(2) if total_analisados > 0 else 0
                tabela_sent = pd.DataFrame({'Sentimento': sent_counts.index, 'Volume Bruto': sent_counts.values, 'Percentual (%)': sent_perc.values})
                total_sent = pd.DataFrame({'Sentimento': ['Total'], 'Volume Bruto': [total_analisados], 'Percentual (%)': [100.0]})
                tabela_sent = pd.concat([tabela_sent[tabela_sent['Volume Bruto'] > 0], total_sent], ignore_index=True)
                st.table(tabela_sent.style.format({'Percentual (%)': '{:.2f}%'}))
            with col_t2:
                st.markdown("###### Tabela 2: Tem√°tica (Completa)")
                todas_cats_tema = categorias_tema_validas + todas_categorias_erro
                tema_counts = df_results['Tema_Classificado'].value_counts().reindex(todas_cats_tema, fill_value=0)
                tema_counts = tema_counts[~tema_counts.index.duplicated(keep='first')]
                tema_perc = (tema_counts / total_analisados * 100).round(2) if total_analisados > 0 else 0
                tabela_tema = pd.DataFrame({'Tema': tema_counts.index, 'Volume Bruto': tema_counts.values, 'Percentual (%)': tema_perc.values})
                total_tema = pd.DataFrame({'Tema': ['Total'], 'Volume Bruto': [total_analisados], 'Percentual (%)': [100.0]})
                tabela_tema = pd.concat([tabela_tema[tabela_tema['Volume Bruto'] > 0], total_tema], ignore_index=True)
                st.table(tabela_tema.style.format({'Percentual (%)': '{:.2f}%'}))

            # --- Tabela Completa e Download ---
            st.markdown("---"); st.subheader("Resultados Completos Detalhados")
            st.dataframe(df_results, use_container_width=True)
            @st.cache_data
            def convert_df_to_csv(df_conv): return df_conv.to_csv(index=False).encode('utf-8-sig')
            csv_output = convert_df_to_csv(df_results)
            st.download_button("üíæ Download Resultados (.csv)", csv_output, 'analise_gemini_resultados.csv', 'text/csv', key='download_csv')

elif not uploaded_file and not analisar_btn :
     st.info("‚¨ÖÔ∏è Fa√ßa o upload de um arquivo .csv ou .xlsx na barra lateral para come√ßar.")