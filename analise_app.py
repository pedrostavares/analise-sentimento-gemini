import streamlit as st
import pandas as pd
import google.generativeai as genai
import io # Para lidar com o arquivo em mem√≥ria
import time # Para poss√≠veis pausas

# --- Configura√ß√£o da P√°gina (DEVE SER O PRIMEIRO COMANDO STREAMLIT) ---
st.set_page_config(layout="wide") # Usa mais espa√ßo da tela

# --- Inicializa√ß√£o do Estado da Sess√£o (se necess√°rio) ---
if 'api_key_configured' not in st.session_state:
    st.session_state.api_key_configured = False
if 'api_key_input_value' not in st.session_state:
     st.session_state.api_key_input_value = "" # Guarda o valor digitado

# --- Configura√ß√£o da API Key ---
api_key_source = None # Para rastrear de onde veio a chave (secrets ou input)

try:
    # 1. Tenta carregar dos secrets (prioridade)
    if hasattr(st, 'secrets') and "GOOGLE_API_KEY" in st.secrets:
        st.session_state.api_key_input_value = st.secrets["GOOGLE_API_KEY"]
        api_key_source = "secrets"
    # else: # N√£o achou nos secrets, deixa o usu√°rio inserir

except Exception as e:
    st.sidebar.warning(f"N√£o foi poss√≠vel ler os secrets: {e}")
    # Continua para permitir inser√ß√£o manual

# --- Interface da Barra Lateral para API Key (SEMPRE MOSTRA O CAMPO SE N√ÉO VEIO DOS SECRETS) ---
st.sidebar.header("Configura√ß√£o")
if api_key_source != "secrets":
    user_provided_key = st.sidebar.text_input(
        "Insira sua Google API Key aqui:",
        type="password",
        key="api_key_widget",
        value=st.session_state.api_key_input_value # Mantem o valor entre runs
    )
    # Atualiza o valor no estado da sess√£o se o usu√°rio digitar algo
    if user_provided_key != st.session_state.api_key_input_value:
         st.session_state.api_key_input_value = user_provided_key
         st.session_state.api_key_configured = False # Requer reconfigura√ß√£o ao mudar
else:
    # Se veio dos secrets, apenas informa
    st.sidebar.success("API Key carregada dos segredos!", icon="‚úÖ")
    st.session_state.api_key_configured = False # For√ßa a reconfigura√ß√£o abaixo

# --- Tentativa de Configurar a API e o Modelo ---
model = None
if st.session_state.api_key_input_value and not st.session_state.api_key_configured:
    try:
        genai.configure(api_key=st.session_state.api_key_input_value)
        # Tenta inicializar o modelo para validar a chave
        model = genai.GenerativeModel('gemini-1.5-flash')
        st.session_state.api_key_configured = True # Marcar como configurado com sucesso
        if api_key_source != "secrets": # Mostra sucesso s√≥ se foi digitada agora
             st.sidebar.success("API Key configurada com sucesso!", icon="üîë")
        st.sidebar.caption(f"Modelo Gemini: gemini-1.5-flash")
    except Exception as e:
        st.sidebar.error(f"Erro ao configurar API Key/Modelo: Verifique a chave.")
        st.session_state.api_key_configured = False
        model = None # Garante que modelo √© None se falhar
# Verifica se a chave foi configurada em algum momento
elif st.session_state.api_key_configured:
     # Chave j√° configurada, tenta re-inicializar o modelo (pode ter perdido estado)
     try:
          model = genai.GenerativeModel('gemini-1.5-flash')
          st.sidebar.caption(f"Modelo Gemini: gemini-1.5-flash (Re-inicializado)")
     except Exception as e:
          st.sidebar.error(f"Erro ao re-inicializar Modelo: {e}")
          st.session_state.api_key_configured = False # Algo deu errado, precisa reconfigurar
          model = None


# --- Prompt Completo e Atualizado ---
seu_prompt_completo = """
Persona: Voc√™ √© uma IA Analista de Feedback de Clientes e Social Listening de uma institui√ß√£o financeira (banco) Brasileira, especializada em interpretar e classificar mensagens em Portugu√™s do Brasil com alta precis√£o. Sua tarefa exige ir al√©m da an√°lise literal, inferindo o contexto prov√°vel das intera√ß√µes (posts sobre o banco, servi√ßos, produtos, eventos, movimentos e campanhas de marca) para classificar o sentimento (Positivo, Negativo, Neutro) e o tema da maioria das mensagens, recorrendo a N√£o Classificado apenas como √∫ltimo recurso absoluto.
Contexto: As mensagens s√£o de clientes e p√∫blico geral interagindo com posts e conte√∫dos de um banco (Ita√∫, Ita√∫ Personnalit√©, Ita√∫ Empresas, Uniclass, Ita√∫ BBA, √≠on, Private) e suas iniciativas. Presuma que a maioria das mensagens curtas, emojis e intera√ß√µes s√£o rea√ß√µes diretas ao conte√∫do da marca.
Tarefa Principal: Classificar cada mensagem recebida em UMA categoria de sentimento (Positivo, Negativo, Neutro ou N√£o Classificado) e UMA categoria tem√°tica. Se o Sentimento for classificado como "N√£o Classificado", o Tema DEVE ser obrigatoriamente "N√£o Classificado (Tema)". Minimize a categoria "N√£o Classificado" interpretando ativamente o sentimento e a relev√¢ncia tem√°tica sempre que poss√≠vel para as demais categorias.

Defini√ß√µes das Categorias de Sentimento (Classifica√ß√£o Obrigat√≥ria - Escolha UMA)
Regra de Ouro: Antes de classificar como "N√£o Classificado", avalie se a mensagem, no contexto prov√°vel de uma intera√ß√£o com a marca/evento, pode razoavelmente ser interpreted como Positiva, Negativa ou Neutra.
Positivo
Defini√ß√£o: Express√µes que denotam satisfa√ß√£o, entusiasmo, apoio, admira√ß√£o, aprecia√ß√£o, gratid√£o, concord√¢ncia ou engajamento positivo. Inclui rea√ß√µes curtas e emojis que, no contexto prov√°vel, expressam aprova√ß√£o ou alegria. Inclui @men√ß√µes isoladas.
Indicadores Chave: Texto de elogio ("√ìtimo", "Amei", "Top!"), agradecimento ("Obrigado"), apoio ("Torcendo!"), aprecia√ß√£o ("Bons insights!"); Emojis positivos (üòç, ‚ù§Ô∏è, üëç, üéâ, ‚ú®, üëè, üôè-gratid√£o, etc.); Men√ß√µes isoladas (@username).
Negativo
Defini√ß√£o: Express√µes que denotam insatisfa√ß√£o, frustra√ß√£o, raiva, cr√≠tica, desaprova√ß√£o, reclama√ß√£o, tristeza, ou qualquer relato de problemas, falhas, erros, golpes, fraudes ou experi√™ncias ruins, mesmo que factuais ou com pedido vago de ajuda.
Indicadores Chave: Texto de cr√≠tica ("P√©ssimo", "Lixo"), relato de problema ("N√£o funciona", "App travado", "Cobran√ßa irregular", "Fui v√≠tima de golpe"), reclama√ß√£o ("Atendimento ruim"), insatisfa√ß√£o ("Taxa abusiva"), frustra√ß√£o (CAIXA ALTA, !!!), advert√™ncia ("N√£o recomendo"); Emojis negativos (üò†, üò°, üëé, üò¢, etc.). Qualquer men√ß√£o textual a um problema ou evento grave √© Negativa.
Neutro
Defini√ß√£o: Mensagens que buscam/fornecem informa√ß√£o factual, fazem observa√ß√µes objetivas, ou expressam rea√ß√µes sem forte val√™ncia positiva ou negativa, assumindo relev√¢ncia contextual e n√£o relatando problemas.
Indicadores Chave: Texto de pergunta/solicita√ß√£o ("Como fa√ßo?", "Qual o endere√ßo?"), declara√ß√£o factual ("O evento √© em Miami"), sugest√£o objetiva, resposta curta factual ("Ok"); Emojis neutros (ü§î, üëÄ, üòÇ, üòÖ, üôè-"por favor", etc.).
√öltimo Recurso:
N√£o Classificado
Defini√ß√£o: Aplicar SOMENTE quando a mensagem for imposs√≠vel de classificar como Positiva, Negativa ou Neutra devido a UM destes motivos:
1.  Idioma Estrangeiro: Predominantemente n√£o em Portugu√™s. (Ex: "What time is it?") -> Resulta em Sentimento: N√£o Classificado, Tema: N√£o Classificado (Tema).
2.  Incompreens√≠vel: Erros graves, c√≥digos aleat√≥rios, texto sem sentido. (Ex: "asdfghjkl") -> Resulta em Sentimento: N√£o Classificado, Tema: N√£o Classificado (Tema).
3.  Spam √ìbvio: Conte√∫do repetitivo claro, links suspeitos isolados, promo√ß√µes n√£o relacionadas. -> Resulta em Sentimento: N√£o Classificado, Tema: N√£o Classificado (Tema).
4.  Totalmente Off-Topic e Sem Conex√£o: Assuntos completamente alheios ao universo da marca/evento. -> Resulta em Sentimento: N√£o Classificado, Tema: N√£o Classificado (Tema).
5.  Intera√ß√µes Sociais Textuais Puras e Gen√©ricas ISOLADAS: Sauda√ß√µes isoladas ("Bom dia", "Ol√°"), risadas textuais isoladas ("kkkk", "rsrs") sem QUALQUER outro elemento interpret√°vel. (Ex: apenas "kkkkkk") -> Resulta em Sentimento: N√£o Classificado, Tema: N√£o Classificado (Tema). MUITO IMPORTANTE: Se houver "kkkk" junto com outra frase (ex: "kkkk adorei"), classifique a frase principal.
Regra Vinculada: Se o sentimento for classificado aqui, o tema ser√° obrigatoriamente "N√£o Classificado (Tema)".

Defini√ß√µes das Categorias Tem√°ticas (Classifica√ß√£o Obrigat√≥ria - Escolha UMA)
***IMPORTANTE: Voc√™ DEVE usar EXATAMENTE UM dos nomes de Tema listados abaixo numerados de 1 a 9. N√£o invente nomes novos ou varia√ß√µes.***
Regra: Se o Sentimento for "N√£o Classificado", o Tema √© "N√£o Classificado (Tema)". Para os demais sentimentos (P/N/N), atribua o tema mais espec√≠fico poss√≠vel da lista abaixo.

1.  **Elogio Geral (Marca/Evento/Conte√∫do/Experi√™ncia)**: Elogios textuais ou via emoji positivo sobre a marca, evento, post, experi√™ncia geral. (Sentimento: Positivo)
2.  **Elogio Espec√≠fico (Pessoa/Figura P√∫blica/Representante/"Laranjinha")**: Elogios a indiv√≠duos, atletas, iniciativas nomeadas. (Sentimento: Positivo)
3.  **Reclama√ß√£o/Cr√≠tica (Servi√ßos/Produtos/Atendimento/Pol√≠ticas)**: Reclama√ß√µes, cr√≠ticas, relatos de problemas (incluindo golpes/fraudes) sobre aspectos do banco. (Sentimento: Negativo)
4.  **Problemas T√©cnicos (Plataformas/Funcionalidades)**: Relatos de problemas com app, site, maquininha, etc. (Sentimento: Negativo)
5.  **Apoio/Incentivo (Pessoas/Causas/Marca)**: Mensagens de torcida, apoio, incentivo. Pode incluir emojis positivos contextuais. (Sentimento: Positivo)
6.  **Solicita√ß√£o/D√∫vida/Sugest√£o**: Perguntas, pedidos de informa√ß√£o, sugest√µes. (Sentimento: Neutro)
7.  **Intera√ß√£o Social**: Aplicar apenas quando o sentimento for P, N ou Neutro. Usar para: Emojis isolados P/N/N sem contexto espec√≠fico forte, @men√ß√µes isoladas (Positivo). Se um emoji/men√ß√£o P/N/N pode ter tema mais espec√≠fico pelo contexto (ex: üèÜ em post de vit√≥ria -> Apoio), priorize o tema espec√≠fico. N√£o usar se sentimento for N√£o Classificado.
8.  **Discuss√£o Espec√≠fica (T√≥pico da Campanha/Evento)**: Coment√°rios sobre o tema central (jogo, jogador, detalhe do evento), incluindo observa√ß√µes factuais. (Sentimento: Pode ser Positivo, Negativo ou Neutro)
9.  **N√£o Classificado (Tema)**: Aplicado exclusivamente e obrigatoriamente quando o sentimento tamb√©m for "N√£o Classificado". Engloba mensagens nos crit√©rios 1 a 5 da se√ß√£o "N√£o Classificado" de Sentimento. (Sentimento: N√£o Classificado)

Instru√ß√µes Finais de Classifica√ß√£o:
1.  An√°lise Dupla Obrigat√≥ria: Sentimento + Tema.
2.  Idioma Primeiro: Se n√£o for predominantemente Portugu√™s, a resposta DEVE SER: Sentimento: N√£o Classificado, Tema: N√£o Classificado (Tema).
3.  "kkkkk" Isolado: Se a mensagem for APENAS "kkkk", "rsrs" ou similar, a resposta DEVE SER: Sentimento: N√£o Classificado, Tema: N√£o Classificado (Tema).
4.  Priorize P/N/N: Esforce-se para encontrar um sentimento Positivo, Negativo ou Neutro antes de usar N√£o Classificado.
5.  Verifica√ß√£o Final de Sentimento: Se, ap√≥s avaliar P/N/N, a mensagem se encaixar nos crit√©rios 2, 3 ou 4 de "N√£o Classificado" de Sentimento (Incompreens√≠vel, Spam, Off-topic), atribua Sentimento = N√£o Classificado.
6.  Vincula√ß√£o de Tema NC: Se o Sentimento for "N√£o Classificado", o Tema √© AUTOMATICAMENTE "N√£o Classificado (Tema)".
7.  Atribui√ß√£o de Tema (para P/N/N): Se o sentimento for P, N ou N, escolha o tema mais espec√≠fico poss√≠vel USANDO EXATAMENTE UM dos nomes da lista numerada de 1 a 9 acima.
8.  Mensagens Mistas: Classifique pelo elemento predominante (Reclama√ß√£o > outros; Pergunta > outros).

Formato de Resposta OBRIGAT√ìRIO:
Responda APENAS com as duas linhas abaixo, usando EXATAMENTE os nomes de categorias definidos:
Sentimento: [Nome Exato da Categoria de Sentimento]
Tema: [Nome Exato da Categoria de Tema]

***N√ÉO inclua nenhuma outra palavra, explica√ß√£o ou formata√ß√£o na sua resposta.***

Agora, analise a seguinte mensagem:
{comment}
"""

# --- Listas de Categorias V√°lidas ---
categorias_sentimento_validas = ["Positivo", "Negativo", "Neutro", "N√£o Classificado"]
categorias_tema_validas = [
    "Elogio Geral (Marca/Evento/Conte√∫do/Experi√™ncia)",
    "Elogio Espec√≠fico (Pessoa/Figura P√∫blica/Representante/\"Laranjinha\")",
    "Reclama√ß√£o/Cr√≠tica (Servi√ßos/Produtos/Atendimento/Pol√≠ticas)",
    "Problemas T√©cnicos (Plataformas/Funcionalidades)",
    "Apoio/Incentivo (Pessoas/Causas/Marca)",
    "Solicita√ß√£o/D√∫vida/Sugest√£o",
    "Intera√ß√£o Social",
    "Discuss√£o Espec√≠fica (T√≥pico da Campanha/Evento)",
    "N√£o Classificado (Tema)"
]
categorias_erro = ["Erro Parsing", "Erro API"]
categorias_erro_tema_especifico = ["Erro API (Timeout)", "Erro API (Geral)", "Erro API (Modelo n√£o iniciado)"]

# --- Fun√ß√£o para Analisar um Coment√°rio ---
#@st.cache_data # Cache pode atrapalhar desenvolvimento
def analisar_comentario(comentario, modelo_gemini):
    """Envia um coment√°rio para a API Gemini e retorna o sentimento e tema classificados."""
    if not comentario or not isinstance(comentario, str) or comentario.strip() == "":
         return "N√£o Classificado", "N√£o Classificado (Tema)"
    if not modelo_gemini: # Verifica se o objeto do modelo existe
        st.warning(f"Tentativa de an√°lise sem modelo Gemini inicializado para: '{comentario[:50]}...'")
        return "Erro API", "Erro API (Modelo n√£o iniciado)"

    prompt_com_comentario = seu_prompt_completo.format(comment=comentario)
    try:
        safety_settings = {
            "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE", "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE",
            "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE", "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE",
        }
        request_options = {"timeout": 60}
        response = modelo_gemini.generate_content(
            prompt_com_comentario, safety_settings=safety_settings, request_options=request_options
            )

        texto_resposta = response.text.strip()
        sentimento_extraido = "Erro Parsing"
        tema_extraido = "Erro Parsing"
        linhas = texto_resposta.split('\n')
        for linha in linhas:
            linha_strip = linha.strip()
            if linha_strip.lower().startswith("sentimento:"):
                sentimento_extraido = linha_strip.split(":", 1)[1].strip()
            elif linha_strip.lower().startswith("tema:"):
                 tema_extraido = linha_strip.split(":", 1)[1].strip()

        if sentimento_extraido == "Erro Parsing" or tema_extraido == "Erro Parsing":
             st.warning(f"Formato resposta inesperado para '{comentario[:50]}...': '{texto_resposta}'")
             return "Erro Parsing", "Erro Parsing"

        if sentimento_extraido not in categorias_sentimento_validas:
            st.warning(f"Sentimento inv√°lido '{sentimento_extraido}' retornado: '{comentario[:50]}...'")
            return "Erro Parsing", "Erro Parsing"

        if sentimento_extraido == "N√£o Classificado":
            if tema_extraido != "N√£o Classificado (Tema)":
                st.warning(f"Corre√ß√£o: Sent='NC' mas Tema='{tema_extraido}'. Ajustado. Msg:'{comentario[:50]}...'")
                return "N√£o Classificado", "N√£o Classificado (Tema)"
            else:
                 return "N√£o Classificado", "N√£o Classificado (Tema)"
        else: # Sentimento √© P, N ou Neutro
             if tema_extraido not in categorias_tema_validas or tema_extraido == "N√£o Classificado (Tema)":
                  st.warning(f"Tema inv√°lido '{tema_extraido}' para Sent='{sentimento_extraido}'. Msg:'{comentario[:50]}...'")
                  # Decide o que fazer: Erro Parsing ou tentar um fallback? Manter Erro por enquanto.
                  return sentimento_extraido, "Erro Parsing" # Mantem o sentimento, mas marca tema como erro
             else:
                  return sentimento_extraido, tema_extraido # Tudo certo

    except Exception as e:
        if "timeout" in str(e).lower():
             st.error(f"Timeout API: '{comentario[:50]}...'")
             return "Erro API", "Erro API (Timeout)"
        else:
             st.error(f"Erro API Geral: '{comentario[:50]}...'. Erro: {e}")
             return "Erro API", "Erro API (Geral)"


# --- Interface Principal ---
st.title("üìä An√°lise de Feedback e Social Listening com Gemini")
st.markdown("Fa√ßa o upload da sua base de coment√°rios (.csv ou .xlsx). A base **DEVE** conter uma coluna chamada `conte√∫do`.")

# --- Controles na Barra Lateral ---
st.sidebar.divider()
st.sidebar.header("Controles")
uploaded_file = st.sidebar.file_uploader("1. Escolha o arquivo", type=["csv", "xlsx"], key="file_uploader")

# Bot√£o de An√°lise - Habilitado se API configurada E arquivo carregado
botao_habilitado = st.session_state.get('api_key_configured', False) and uploaded_file is not None
analisar_btn = st.sidebar.button("2. Analisar Coment√°rios", key="analyze_button", disabled=(not botao_habilitado))

# Mensagens de status na sidebar
if not st.session_state.get('api_key_configured', False):
    st.sidebar.warning("API Key n√£o configurada ou inv√°lida.")
if not uploaded_file:
    st.sidebar.info("Aguardando upload do arquivo...")


# --- √Årea Principal: Pr√©-visualiza√ß√£o e Resultados ---
df = None # Inicializa df como None
total_comentarios_validos = 0

if uploaded_file is not None:
    try:
        if uploaded_file.name.endswith('.csv'):
            try: df_original = pd.read_csv(uploaded_file)
            except UnicodeDecodeError:
                 uploaded_file.seek(0); df_original = pd.read_csv(uploaded_file, encoding='latin1')
        else: df_original = pd.read_excel(uploaded_file)
        df = df_original.copy()

        if 'conte√∫do' not in df.columns:
            st.error("Erro Cr√≠tico: Coluna 'conte√∫do' n√£o encontrada.")
            df = None # Invalida o dataframe
        else:
            df.dropna(subset=['conte√∫do'], inplace=True)
            df = df[df['conte√∫do'].astype(str).str.strip() != '']
            total_comentarios_validos = len(df)

    except Exception as e:
        st.error(f"Erro ao ler o arquivo: {e}")
        df = None # Invalida

if df is not None:
    st.subheader("Pr√©-visualiza√ß√£o dos dados (at√© 10 linhas):")
    st.dataframe(df.head(10))
    st.info(f"Total de coment√°rios v√°lidos (n√£o vazios) encontrados: **{total_comentarios_validos}**")

    results_container = st.container()
    if analisar_btn:
        if total_comentarios_validos == 0:
            st.warning("Nenhum coment√°rio v√°lido para an√°lise.")
        elif not model:
             st.error("Erro: Modelo Gemini n√£o est√° inicializado. Verifique a API Key.")
        else:
            st.write(f"Iniciando an√°lise de **{total_comentarios_validos}** coment√°rios...")
            progress_bar = st.progress(0)
            status_text = st.empty()

            resultados_sentimento = []
            resultados_tema = []

            for i, comentario in enumerate(df['conte√∫do']):
                sentimento, tema = analisar_comentario(str(comentario), model)
                resultados_sentimento.append(sentimento)
                resultados_tema.append(tema)
                progresso = (i + 1) / total_comentarios_validos
                progress_bar.progress(progresso)
                status_text.text(f"Analisando: {i+1}/{total_comentarios_validos}")
                # time.sleep(0.01) # Pequena pausa opcional

            progress_bar.empty(); status_text.success(f"‚úÖ An√°lise conclu√≠da!")

            df['Sentimento_Classificado'] = resultados_sentimento
            df['Tema_Classificado'] = resultados_tema

            with results_container:
                st.subheader("Resultados Completos (com Classifica√ß√£o):")
                st.dataframe(df)

                # --- Tabelas Agregadas ---
                st.subheader("Tabela 1: An√°lise de Sentimento")
                todas_cats_sent = categorias_sentimento_validas + categorias_erro
                sent_counts = df['Sentimento_Classificado'].value_counts().reindex(todas_cats_sent, fill_value=0)
                sent_perc = (sent_counts / total_comentarios_validos * 100).round(2) if total_comentarios_validos > 0 else 0
                tabela_sent = pd.DataFrame({'Sentimento': sent_counts.index, 'Volume Bruto': sent_counts.values, 'Percentual (%)': sent_perc.values})
                total_sent = pd.DataFrame({'Sentimento': ['Total'], 'Volume Bruto': [total_comentarios_validos], 'Percentual (%)': [100.0]})
                tabela_sent = pd.concat([tabela_sent, total_sent], ignore_index=True)
                st.table(tabela_sent.style.format({'Percentual (%)': '{:.2f}%'}))

                st.subheader("Tabela 2: An√°lise Tem√°tica")
                todas_cats_tema = categorias_tema_validas + categorias_erro + categorias_erro_tema_especifico
                tema_counts = df['Tema_Classificado'].value_counts().reindex(todas_cats_tema, fill_value=0)
                # Remover duplicatas se Erro API estiver em ambas listas (improv√°vel, mas seguro)
                tema_counts = tema_counts[~tema_counts.index.duplicated(keep='first')]
                tema_perc = (tema_counts / total_comentarios_validos * 100).round(2) if total_comentarios_validos > 0 else 0
                tabela_tema = pd.DataFrame({'Tema': tema_counts.index, 'Volume Bruto': tema_counts.values, 'Percentual (%)': tema_perc.values})
                total_tema = pd.DataFrame({'Tema': ['Total'], 'Volume Bruto': [total_comentarios_validos], 'Percentual (%)': [100.0]})
                tabela_tema = pd.concat([tabela_tema, total_tema], ignore_index=True)
                st.table(tabela_tema.style.format({'Percentual (%)': '{:.2f}%'}))

                # --- Bot√£o Download ---
                @st.cache_data
                def convert_df_to_csv(df_conv): return df_conv.to_csv(index=False).encode('utf-8-sig')
                csv_output = convert_df_to_csv(df)
                st.download_button("üíæ Download Resultados (.csv)", csv_output, 'analise_gemini.csv', 'text/csv', key='download_csv')

elif not uploaded_file and not analisar_btn :
     st.info("‚¨ÖÔ∏è Fa√ßa o upload de um arquivo .csv ou .xlsx na barra lateral para come√ßar.")