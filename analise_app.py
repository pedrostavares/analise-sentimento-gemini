# -*- coding: utf-8 -*- # Adicionado para garantir codifica√ß√£o UTF-8

import streamlit as st
import pandas as pd
import google.generativeai as genai
import io # Para lidar com o arquivo em mem√≥ria
import time # Para poss√≠veis pausas
import plotly.express as px # Para gr√°ficos
import numpy as np # Para c√°lculos num√©ricos (usado no NPS)

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    layout="wide",
    page_title="An√°lise de Sentimento e Tem√°tica - IH",
    page_icon="üìä"
)

# --- Inicializa√ß√£o do Estado da Sess√£o ---
if 'api_key_configured' not in st.session_state: st.session_state.api_key_configured = False
if 'api_key_input_value' not in st.session_state: st.session_state.api_key_input_value = ""
if 'analysis_done' not in st.session_state: st.session_state.analysis_done = False
if 'df_results' not in st.session_state: st.session_state.df_results = None
if 'insights_generated' not in st.session_state: st.session_state.insights_generated = None # Para guardar os insights

# --- Configura√ß√£o da API Key ---
api_key_source = None
try:
    # Tenta carregar a chave dos segredos do Streamlit (ideal para deploy)
    if hasattr(st, 'secrets') and "GOOGLE_API_KEY" in st.secrets:
        st.session_state.api_key_input_value = st.secrets["GOOGLE_API_KEY"]
        api_key_source = "secrets"
except Exception as e:
    st.sidebar.warning(f"N√£o foi poss√≠vel ler os secrets: {e}", icon="‚ö†Ô∏è")

# --- Interface da Barra Lateral para API Key ---
st.sidebar.header("Configura√ß√£o")
# S√≥ mostra o input se a chave N√ÉO veio dos secrets
if api_key_source != "secrets":
    user_provided_key = st.sidebar.text_input(
        "Insira sua Google API Key aqui:", type="password",
        key="api_key_widget", value=st.session_state.api_key_input_value,
        help="Sua chave da API do Google AI Studio (Gemini)."
    )
    # Atualiza o estado se a chave mudar no input
    if user_provided_key != st.session_state.api_key_input_value:
         st.session_state.api_key_input_value = user_provided_key
         st.session_state.api_key_configured = False # Reseta a configura√ß√£o ao mudar a chave
         st.session_state.analysis_done = False # Reseta an√°lise se chave mudar
         st.session_state.insights_generated = None # Reseta insights
         st.rerun() # Re-executa para tentar configurar com a nova chave
else:
    st.sidebar.success("API Key carregada dos segredos!", icon="‚úÖ")
    # Marca como n√£o configurado inicialmente para for√ßar a configura√ß√£o abaixo
    if not st.session_state.api_key_configured:
        st.session_state.api_key_configured = False

# --- Tentativa de Configurar a API e o Modelo ---
model = None
# Tenta configurar se tem uma chave e ainda n√£o foi configurado
if st.session_state.api_key_input_value and not st.session_state.api_key_configured:
    try:
        genai.configure(api_key=st.session_state.api_key_input_value)
        model = genai.GenerativeModel('gemini-1.5-flash') # Ou 'gemini-pro' se preferir
        st.session_state.api_key_configured = True
        if api_key_source != "secrets": # S√≥ mostra sucesso se a chave foi inserida manualmente
            st.sidebar.success("API Key configurada com sucesso!", icon="üîë")
        st.sidebar.caption(f"Modelo Gemini: gemini-1.5-flash") # Mostra o modelo
    except Exception as e:
        st.sidebar.error(f"Erro ao configurar API Key/Modelo. Verifique a chave.", icon="üö®")
        st.session_state.api_key_configured = False
        model = None
# Se j√° estava configurado, tenta recarregar o modelo (√∫til se houve erro antes)
elif st.session_state.api_key_configured:
     try:
         model = genai.GenerativeModel('gemini-1.5-flash')
         # N√£o precisa mostrar mensagem de sucesso de novo aqui
     except Exception as e:
         st.sidebar.error(f"Erro ao recarregar o Modelo: {e}", icon="üö®")
         st.session_state.api_key_configured = False # Marca como n√£o configurado se falhar
         model = None


# --- Prompt Principal REFINADO v4 (Baseado na sua atualiza√ß√£o) ---
seu_prompt_completo = """
Persona: Voc√™ √© uma IA Analista de Feedback de Clientes e Social Listening altamente especializada no setor banc√°rio brasileiro, com profundo conhecimento sobre o Banco Ita√∫ e seu ecossistema de marcas (incluindo, mas n√£o se limitando a: Ita√∫ (Masterbrand), Ita√∫ Personnalit√© (Alta Renda), Uniclass (M√©dia Renda), Ita√∫ Empresas (PJ), √≠on (Investimentos), Private (Alt√≠ssima Renda), Ita√∫ BBA (Agro, Atacado, Investment Banking), Itubers/Cora√ß√£o Laranja (Endomarketing)). Voc√™ compreende produtos financeiros espec√≠ficos (CDB, LCI, cr√©dito, etc.), jarg√µes do mercado (TED, DOC, Pix, spread) e o contexto de campanhas de marketing que utilizam influenciadores, creators, figuras p√∫blicas e patroc√≠nios de grandes eventos (como Rock in Rio, The Town, Miami Open). Sua an√°lise combina rigor na aplica√ß√£o das regras de classifica√ß√£o com empatia e compreens√£o contextual para interpretar nuances e casos lim√≠trofes de forma pr√≥xima √† humana.

Objetivo:
1.	Prim√°rio: Classificar CADA mensagem recebida em Portugu√™s do Brasil (Pt-BR) em UMA categoria de Sentimento (Positivo, Negativo, Neutro, N√£o Classificado) e UMA categoria Tem√°tica (conforme lista e regras de prioridade), aderindo estritamente √†s defini√ß√µes e minimizando 'N√£o Classificado'.
2.	Secund√°rio: (Este prompt foca APENAS na classifica√ß√£o. A gera√ß√£o de insights ser√° feita em outra etapa).

Contexto Geral: As mensagens s√£o de clientes e p√∫blico geral interagindo com posts e conte√∫dos do Ita√∫ e suas submarcas, cobrindo produtos, servi√ßos, atendimento, plataformas digitais, campanhas publicit√°rias, influenciadores associados, patroc√≠nios e a imagem geral da institui√ß√£o. Assuma que rea√ß√µes curtas s√£o contextuais ao post original e interprete termos t√©cnicos e siglas do setor financeiro corretamente.

=== REGRAS GERAIS E DE OURO ===
1.	An√°lise Dupla Obrigat√≥ria: Sentimento + Tema para cada mensagem.
2.	Priorize P/N/Neutro: S√≥ use 'N√£o Classificado' como √öLTIMO recurso absoluto para mensagens que se encaixam estritamente nas defini√ß√µes de NC.
3.	Vincula√ß√£o NC: Se Sentimento = N√£o Classificado, Tema = N√£o Classificado (Tema).
4.	Regra Cr√≠tica - Men√ß√£o Isolada (√önica ou M√∫ltipla): Mensagem APENAS com men√ß√£o (@ ou []) = Sentimento: Positivo, Tema: Intera√ß√£o Social e Engajamento. SEMPRE RESPONDA ASSIM PARA ESTES CASOS.

=== DEFINI√á√ïES DE SENTIMENTO (Escolha UMA) ===
1.	Positivo: Expressa satisfa√ß√£o, apoio, entusiasmo, gratid√£o genu√≠na, aprecia√ß√£o (mesmo moderada "interessante"), concord√¢ncia, ou engajamento via compartilhamento/marca√ß√£o.
    *   Indicadores: Men√ß√µes isoladas (@/[]); Elogios ("Amei", "Top"), agradecimentos ("Obg"), apoio ("Parab√©ns"), aprecia√ß√£o ("Belo post", "Interessante"), concord√¢ncia ("Isso"); Emojis claramente positivos (üòç, ‚ù§Ô∏è, üëç, üéâ); Combina√ß√µes Texto/Emoji Positivo.
2.	Negativo: Expressa insatisfa√ß√£o, cr√≠tica, raiva, frustra√ß√£o, reclama√ß√£o, tristeza, sarcasmo √≥bvio, ou qualquer relato/indica√ß√£o de problema, falha, erro, golpe, fraude ou experi√™ncia ruim.
    *   Indicadores: Cr√≠ticas ("P√©ssimo"), relato/indica√ß√£o forte de problemas ("N√£o funciona CDB", "Cobran√ßa indevida DOC", "Fui v√≠tima de golpe Pix", "@itau Erro TED"), reclama√ß√µes ("Atendimento Uniclass ruim"), insatisfa√ß√£o ("Taxa alta BBA"), frustra√ß√£o (CAIXA ALTA negativa), advert√™ncia ("N√£o recomendo √≠on"); Sarcasmo √≥bvio; Emojis claramente negativos (üò†, üò°, üëé, üò¢). Qualquer men√ß√£o a golpe, fraude, erro ou problema funcional √© Negativa.
3.	Neutro: Busca/fornece informa√ß√£o, observa√ß√£o factual, pergunta, sugest√£o objetiva ou impl√≠cita ("poderia ser melhor") (sem cr√≠tica/sarcasmo), express√£o de equil√≠brio ("ok"), ou rea√ß√£o amb√≠gua/sem forte val√™ncia P/N por padr√£o (emojis como üôè, üòÇ, ü§î, üëÄ sem contexto forte).
    *   Indicadores: Emojis amb√≠guos padr√£o; Perguntas/Respostas a perguntas ("Como fa√ßo LCI?", "?"), express√µes de equil√≠brio ("Ok"), sugest√µes impl√≠citas ("Poderia ser melhor o app Personnalit√©"), pedidos de ajuda claros (sem problema grave), informa√ß√µes factuais ("O Rock in Rio √© patrocinado"), sugest√µes objetivas, respostas curtas factuais ("Entendido"), outros emojis neutros (üëå, ü§∑‚Äç‚ôÄÔ∏è, üòê); Termos/siglas espec√≠ficos ("ESG").
4.	N√£o Classificado: APLICAR SOMENTE E EXCLUSIVAMENTE QUANDO A MENSAGEM ATENDER A UM DESTES CRIT√âRIOS:
    1.	Idioma Estrangeiro (predominante).
    2.	Incompreens√≠vel (erros graves, digita√ß√£o aleat√≥ria, sem sentido l√≥gico).
    3.	Men√ß√£o + Texto Incompleto/Amb√≠guo/Incompreens√≠vel (Ex: "@itau p", "@itau 2", "@itau ..." SEM indicar problema forte ou sarcasmo claro).
    4.	Spam/Link Isolado (conte√∫do repetitivo √≥bvio, promo√ß√µes n√£o relacionadas, URL isolada SEM contexto relevante).
    5.	Totalmente Off-Topic (sem QUALQUER conex√£o com Ita√∫, bancos, finan√ßas, eventos/campanhas associadas. Ex: "Receita de bolo").
    6.	Intera√ß√£o Social Pura Textual Isolada (APENAS sauda√ß√µes/despedidas "Bom dia", APENAS risadas textuais "kkkk", "rsrs").

=== DEFINI√á√ïES DE TEMA (Escolha UMA - Aplicar Regras de Prioridade Abaixo) ===
***IMPORTANTE: Use EXATAMENTE um dos nomes de Tema 1 a 10 abaixo. Se Sentimento = N√£o Classificado, Tema = N√£o Classificado (Tema).***

1.	Marca e Imagem: Percep√ß√£o geral da marca Ita√∫ ou submarcas (Personnalit√©, Uniclass, etc.), reputa√ß√£o, campanhas institucionais, patroc√≠nios gerais (Rock in Rio, The Town, etc.). (Sentimento: P/N/Neutro)
2.	Produtos e Servi√ßos (Geral): Sobre cart√µes, contas, seguros, investimentos (CDB, LCI, √≠on), cr√©dito (consignado), taxas, pol√≠ticas, benef√≠cios, contrata√ß√£o, cancelamento. (Sentimento: P/N/Neutro)
3.	Atendimento e Suporte: Sobre canais (ag√™ncia, telefone, chat), qualidade do suporte, resolu√ß√£o de problemas pelo atendimento (incluindo de submarcas). (Sentimento: P/N/Neutro)
4.	Plataformas Digitais (App/Site/ATM): Feedback sobre usabilidade, design, functionalities (PIX, TED, DOC, login), performance de app (Ita√∫, Personnalit√©, √≠on, Empresas), site, caixas eletr√¥nicos. (Sentimento: P/N/Neutro)
5.	Figuras P√∫blicas e Representantes: Foco em atletas patrocinados, influenciadores, creators, "laranjinhas", executivos, etc., associados a campanhas ou √† marca. (Sentimento: P/N/Neutro)
6.	Eventos e Campanhas Espec√≠ficas: Discuss√µes focadas em evento/campanha nomeado (log√≠stica, experi√™ncia, tema), diferente do patroc√≠nio geral. (Sentimento: P/N/Neutro)
7.	Seguran√ßa e Fraude: Sobre golpes, fraudes, seguran√ßa da conta, phishing, roubos relacionados a contas/cart√µes. (Sentimento: Geralmente Negativo, pode ser Neutro)
8.	Intera√ß√£o Social e Engajamento: Baixa prioridade. Usar para: Men√ß√µes isoladas (@/[] - Positivo); Emojis isolados P/N/Neutro sem outro tema claro.
9.	Solicita√ß√£o/D√∫vida/Sugest√£o (Transversal): Prioridade baixa/m√©dia. Usar quando o FOCO PRINCIPAL √© a pergunta/pedido/sugest√£o em si, e n√£o se encaixa melhor em temas mais espec√≠ficos. (Sentimento: Geralmente Neutro)
10.	N√£o Classificado (Tema): Exclusivamente quando Sentimento = N√£o Classificado.

=== REGRAS DE PRIORIDADE PARA TEMAS ===
Aplique na seguinte ordem. Se a mensagem se encaixar em m√∫ltiplos temas, escolha o primeiro da lista que se aplicar:
1.	Seguran√ßa e Fraude: (Prioridade M√°xima) Se mencionar golpe, fraude, seguran√ßa.
2.	Plataformas Digitais (App/Site/ATM): Se o feedback for especificamente sobre essas plataformas.
3.	Atendimento e Suporte: Se o foco for a intera√ß√£o com canais de atendimento.
4.	Produtos e Servi√ßos (Geral): Se sobre caracter√≠sticas, taxas, contrata√ß√£o/cancelamento de produtos/servi√ßos.
5.	Eventos e Campanhas Espec√≠ficas: Se claramente focado em um evento/campanha nomeado.
6.	Figuras P√∫blicas e Representantes: Se o foco principal for a pessoa/representante.
7.	Marca e Imagem: Para coment√°rios gerais sobre a marca/reputa√ß√£o/patroc√≠nios gerais.
8.	Solicita√ß√£o/D√∫vida/Sugest√£o (Transversal): Se o foco principal for a pergunta/pedido em si.
9.	Intera√ß√£o Social e Engajamento: Para men√ß√µes isoladas, emojis isolados sem outro tema forte. (Prioridade M√≠nima antes de NC).
10.	N√£o Classificado (Tema): Apenas se Sentimento = N√£o Classificado.

=== INSTRU√á√ïES ADICIONAIS DE CLASSIFICA√á√ÉO ===
*   Formato de Resposta: EXATAMENTE DUAS LINHAS, SEMPRE:
    Sentimento: [Nome Exato da Categoria de Sentimento]
    Tema: [Nome Exato da Categoria de Tema]
    (N√£o inclua NADA MAIS, nem explica√ß√µes, nem markdown, nem cabe√ßalhos).
*   Aplicar Prioridade de Tema: Siga estritamente as regras de prioridade.
*   Detectar Sarcasmo: Tentar identificar e classificar como Negativo. Se detectado, o tema deve seguir a prioridade normal (ex: Sarcasmo sobre app -> Negativo / Plataformas Digitais).
*   Men√ß√µes + Texto: Seguir o TEXTO se CLARO e COMPLETO (aplicando prioridade de tema). Se FORTE INDICADOR DE PROBLEMA -> Negativo/Tema Relevante. Se INCOMPLETO/AMB√çGUO/INCOMPREENS√çVEL (sem indicar problema/sarcasmo) -> N√£o Classificado/N√£o Classificado (Tema).
*   Emojis Amb√≠guos: Padr√£o Neutro (üôè, üòÇ, ü§î, üëÄ) sem contexto forte.
*   Val√™ncia Leve: "Interessante" -> Positivo / Tema relevante (ex: Marca e Imagem). "Ok", "Poderia ser melhor" -> Neutro / Tema relevante (ex: Plataformas Digitais se sobre app).
*   Perguntas/Respostas: Geralmente Neutro / Tema conforme prioridade (ou Solicita√ß√£o/D√∫vida/Sugest√£o se gen√©rico).
*   Emojis Mistos: Prioridade para determinar Sentimento: Negativo > Positivo > Neutro.
*   √änfase (!!!, ???): Modifica/refor√ßa o sentimento base do texto.
*   Mensagens Mistas: Classifique pelo elemento PREDOMINANTE ou mais FORTE (Reclama√ß√£o/Problema/Fraude/Sarcasmo > outros; Pergunta Clara > outros), aplicando prioridade de tema.

Agora, classifique a seguinte mensagem:
{comment}
"""

# --- Prompt para Gera√ß√£o de Insights (NOVO) ---
prompt_geracao_insights = """
Persona: Voc√™ √© um Analista de Social Listening S√™nior, especializado no Banco Ita√∫ e seu ecossistema. Sua tarefa √© interpretar um resumo de dados de classifica√ß√£o de sentimentos e temas de coment√°rios de clientes/p√∫blico e gerar insights acion√°veis.

Contexto: Voc√™ recebeu um resumo da an√°lise de {total_comentarios_analisados} coment√°rios. As classifica√ß√µes foram feitas seguindo crit√©rios espec√≠ficos para o Ita√∫ (Sentimento: Positivo, Negativo, Neutro, NC; Temas: Marca, Produtos, Atendimento, Plataformas, Figuras P√∫blicas, Eventos, Seguran√ßa, Intera√ß√£o, Solicita√ß√£o, NC).

Dados de Resumo Fornecidos:
*   Distribui√ß√£o Geral de Sentimentos (Total: {total_comentarios_analisados}):
    - Positivo: {count_pos} ({perc_pos:.1f}%)
    - Negativo: {count_neg} ({perc_neg:.1f}%)
    - Neutro: {count_neu} ({perc_neu:.1f}%)
    - N√£o Classificado / Erros: {count_nc_err} ({perc_nc_err:.1f}%)
*   Top 5 Temas Mais Comentados (Excluindo Intera√ß√£o Social, NC e Erros. Total destes temas: {total_temas_insights}):
{top_temas_formatado}
*   Top 3 Temas Associados ao Sentimento NEGATIVO (Total de coment√°rios negativos com tema v√°lido: {total_temas_neg}):
{top_temas_negativos_formatado}

Tarefa: Com base EXCLUSIVAMENTE nos dados de resumo fornecidos acima, elabore um bloco conciso de "Insights e Percep√ß√µes Acion√°veis". Organize sua resposta usando os seguintes t√≥picos em Markdown:

### Principais Destaques Positivos:
*   (Comente a propor√ß√£o de coment√°rios positivos. Se houver dados nos Top Temas, relacione o sentimento positivo a algum tema espec√≠fico, se poss√≠vel inferir indiretamente. Ex: "Alto volume positivo pode estar ligado a X tema, se este for predominante.")

### Principais Pontos de Aten√ß√£o (Negativos):
*   (Comente a propor√ß√£o de coment√°rios negativos. **Crucialmente, foque nos 'Top 3 Temas Associados ao Sentimento NEGATIVO'**. Identifique as principais √°reas de reclama√ß√£o/cr√≠tica. Chame aten√ß√£o para poss√≠veis "telhados de vidro" ou problemas recorrentes nesses temas.)

### Oportunidades e Sugest√µes:
*   (Analise a propor√ß√£o de coment√°rios Neutros. Se o tema 'Solicita√ß√£o/D√∫vida/Sugest√£o' aparecer nos Top Temas, indique oportunidade de esclarecimento ou melhoria. Se temas negativos recorrentes aparecerem, sugira investiga√ß√£o ou a√ß√£o espec√≠fica para mitigar.)

### Observa√ß√µes Gerais:
*   (Fa√ßa um balan√ßo geral. Comente se a distribui√ß√£o de sentimentos parece saud√°vel ou preocupante. Mencione se a propor√ß√£o de 'N√£o Classificado/Erros' √© alta, indicando poss√≠veis problemas na coleta ou classifica√ß√£o. Destaque algum tema espec√≠fico que dominou a conversa, se for o caso.)

Instru√ß√µes Adicionais:
*   Seja direto e focado em insights que possam gerar a√ß√µes para o Ita√∫.
*   Baseie-se APENAS nos dados fornecidos no resumo. N√£o invente informa√ß√µes ou temas n√£o listados.
*   Se algum dado crucial estiver faltando ou for insuficiente (ex: muito poucos coment√°rios negativos para tirar conclus√µes sobre temas negativos), mencione essa limita√ß√£o.
*   Mantenha a linguagem profissional e anal√≠tica.
*   Use bullet points (*) para listar os insights dentro de cada t√≥pico.
"""

# --- Listas de Categorias V√°lidas (ATUALIZADAS COM BASE NO NOVO PROMPT) ---
categorias_sentimento_validas = ["Positivo", "Negativo", "Neutro", "N√£o Classificado"]
categorias_tema_validas = [
    "Marca e Imagem",
    "Produtos e Servi√ßos (Geral)",
    "Atendimento e Suporte",
    "Plataformas Digitais (App/Site/ATM)",
    "Figuras P√∫blicas e Representantes",
    "Eventos e Campanhas Espec√≠ficas",
    "Seguran√ßa e Fraude",
    "Intera√ß√£o Social e Engajamento",
    "Solicita√ß√£o/D√∫vida/Sugest√£o (Transversal)",
    "N√£o Classificado (Tema)" # Este √© o tema para quando o sentimento √© N√£o Classificado
]
categorias_erro = ["Erro Parsing", "Erro API"]
categorias_erro_tema_especifico = ["Erro API (Timeout)", "Erro API (Geral)", "Erro API (Modelo n√£o iniciado)", "Erro API (Conte√∫do Bloqueado)"]
todas_categorias_erro = list(set(categorias_erro + categorias_erro_tema_especifico))

# Categorias a serem exclu√≠das dos c√°lculos de NPS e gr√°ficos principais
categorias_excluir_sentimento = ["N√£o Classificado"] + todas_categorias_erro
# Exclui NC, Erros e Intera√ß√£o Social dos gr√°ficos/insights principais de TEMAS de neg√≥cio
categorias_excluir_tema = ["N√£o Classificado (Tema)", "Intera√ß√£o Social e Engajamento"] + todas_categorias_erro


# --- Fun√ß√£o para Analisar um Coment√°rio ---
def analisar_comentario(comentario, modelo_gemini):
    """Envia um coment√°rio para a API Gemini e retorna o sentimento e tema classificados."""
    # Retorna NC para coment√°rios vazios ou inv√°lidos
    if not comentario or not isinstance(comentario, str) or comentario.strip() == "":
        return "N√£o Classificado", "N√£o Classificado (Tema)"
    # Retorna erro se o modelo n√£o foi inicializado
    if not modelo_gemini:
        return "Erro API", "Erro API (Modelo n√£o iniciado)"

    # Preenche o prompt com o coment√°rio atual
    prompt_com_comentario = seu_prompt_completo.format(comment=comentario)
    try:
        # Configura√ß√µes de seguran√ßa (relaxadas para evitar bloqueios comuns em feedback)
        safety_settings = {
            "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE",
            "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE",
            "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE",
            "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE"
        }
        # Define um tempo limite para a resposta da API
        request_options = {"timeout": 60} # 60 segundos

        # Chama a API Gemini
        response = modelo_gemini.generate_content(
            prompt_com_comentario,
            safety_settings=safety_settings,
            request_options=request_options
        )

        # Processa a resposta da API
        texto_resposta = response.text.strip()
        sentimento_extraido = "Erro Parsing"
        tema_extraido = "Erro Parsing"
        linhas = texto_resposta.split('\n')

        # Tenta extrair Sentimento e Tema das linhas da resposta
        for linha in linhas:
            linha_strip = linha.strip()
            if linha_strip.lower().startswith("sentimento:"):
                sentimento_extraido = linha_strip.split(":", 1)[1].strip()
            elif linha_strip.lower().startswith("tema:"):
                tema_extraido = linha_strip.split(":", 1)[1].strip()

        # --- Valida√ß√µes e Corre√ß√µes da Resposta ---

        # 1. Verifica se conseguiu extrair ambos
        if sentimento_extraido == "Erro Parsing" or tema_extraido == "Erro Parsing":
            # print(f"Debug - Erro Parsing: '{comentario[:50]}...' -> '{texto_resposta}'") # Log local (opcional)
            return "Erro Parsing", "Erro Parsing"

        # 2. Verifica se o Sentimento √© v√°lido
        if sentimento_extraido not in categorias_sentimento_validas:
            # print(f"Debug - Sentimento Inv√°lido: '{sentimento_extraido}' para '{comentario[:50]}...'") # Log local (opcional)
            return "Erro Parsing", "Erro Parsing" # Considera erro de parsing se inv√°lido

        # 3. Regra de Ouro: Se Sentimento √© NC, Tema DEVE ser NC(Tema)
        if sentimento_extraido == "N√£o Classificado":
            # Auto-corrige silenciosamente se a IA retornou tema diferente
            return "N√£o Classificado", "N√£o Classificado (Tema)"

        # 4. Se Sentimento √© P/N/Neutro, verifica se o Tema √© v√°lido E diferente de NC(Tema)
        else: # Sentimento √© Positivo, Negativo ou Neutro
            if tema_extraido not in categorias_tema_validas or tema_extraido == "N√£o Classificado (Tema)":
                 # print(f"Debug - Tema Inv√°lido/NC p/ Sent V√°lido: '{tema_extraido}' para Sent='{sentimento_extraido}', Msg:'{comentario[:50]}...'") # Log local
                 # Mant√©m o sentimento v√°lido, mas marca o tema como erro de parsing
                 return sentimento_extraido, "Erro Parsing"
            else:
                 # Tudo OK
                 return sentimento_extraido, tema_extraido

    # --- Tratamento de Erros da API ---
    except genai.types.StopCandidateException as e:
        # Captura especificamente erros de conte√∫do bloqueado pelas safety settings
        # print(f"Debug - Erro API (Bloqueado): '{comentario[:50]}...'") # Log local
        return "Erro API", "Erro API (Conte√∫do Bloqueado)"
    except Exception as e:
        # Captura outros erros da API (timeout, conex√£o, etc.)
        error_type = "Erro API (Geral)"
        error_message = str(e).lower()
        if "timeout" in error_message or "deadline exceeded" in error_message:
            error_type = "Erro API (Timeout)"
        # print(f"Debug - {error_type}: '{comentario[:50]}...' Erro: {e}") # Log local
        return "Erro API", error_type

# --- Fun√ß√£o para Gerar Insights (NOVA) ---
def gerar_insights(df_resultados_func, modelo_gemini):
    """Analisa o DataFrame de resultados e gera insights usando a API Gemini."""
    if df_resultados_func is None or df_resultados_func.empty:
        return "N√£o h√° dados suficientes para gerar insights."
    if not modelo_gemini:
        return "*Erro: Modelo Gemini n√£o inicializado. N√£o √© poss√≠vel gerar insights.*"

    try:
        total_analisados_func = len(df_resultados_func)

        # 1. Calcular contagens GERAIS de sentimentos (incluindo NC/Erros)
        sent_counts_total = df_resultados_func['Sentimento_Classificado'].value_counts()
        count_pos_func = sent_counts_total.get('Positivo', 0)
        count_neg_func = sent_counts_total.get('Negativo', 0)
        count_neu_func = sent_counts_total.get('Neutro', 0)
        # Soma NC e todos os tipos de erro para o total 'N√£o Classificado / Erros'
        count_nc_err_func = total_analisados_func - (count_pos_func + count_neg_func + count_neu_func)

        # Calcula percentuais gerais
        perc_pos_func = (count_pos_func / total_analisados_func * 100) if total_analisados_func > 0 else 0
        perc_neg_func = (count_neg_func / total_analisados_func * 100) if total_analisados_func > 0 else 0
        perc_neu_func = (count_neu_func / total_analisados_func * 100) if total_analisados_func > 0 else 0
        perc_nc_err_func = (count_nc_err_func / total_analisados_func * 100) if total_analisados_func > 0 else 0

        # 2. Calcular contagens de temas para Insights (excluindo categorias indesejadas)
        df_tema_insights = df_resultados_func[~df_resultados_func['Tema_Classificado'].isin(categorias_excluir_tema)].copy()
        tema_counts_insights = df_tema_insights['Tema_Classificado'].value_counts()
        top_temas_formatado_func = ""
        total_temas_insights_func = 0
        if not tema_counts_insights.empty:
            total_temas_insights_func = tema_counts_insights.sum()
            # Formata os Top 5 temas para o prompt
            top_temas_formatado_func = "\n".join([
                f"    - {tema}: {count} ({count / total_temas_insights_func * 100:.1f}%)"
                for tema, count in tema_counts_insights.head(5).items() # Pega os Top 5 temas
            ]) if total_temas_insights_func > 0 else "    - Nenhum tema relevante classificado."
        else:
            top_temas_formatado_func = "    - Nenhum tema relevante classificado."

        # 3. Calcular principais temas NEGATIVOS
        df_negativos = df_resultados_func[df_resultados_func['Sentimento_Classificado'] == 'Negativo'].copy()
        # Filtra tamb√©m os temas negativos exclu√≠dos (NC, Erro, Intera√ß√£o)
        df_negativos_filtrados = df_negativos[~df_negativos['Tema_Classificado'].isin(categorias_excluir_tema)]
        tema_neg_counts = df_negativos_filtrados['Tema_Classificado'].value_counts()

        top_temas_negativos_formatado_func = ""
        total_temas_neg_func = 0
        if not tema_neg_counts.empty:
             total_temas_neg_func = tema_neg_counts.sum()
             # Formata os Top 3 temas negativos para o prompt
             top_temas_negativos_formatado_func = "\n".join([
                 f"    - {tema}: {count} ({count / total_temas_neg_func * 100:.1f}%)"
                 for tema, count in tema_neg_counts.head(3).items() # Pega os Top 3 temas negativos
             ]) if total_temas_neg_func > 0 else "    - Nenhum tema negativo relevante classificado."
        else:
             top_temas_negativos_formatado_func = "    - Nenhum tema negativo relevante classificado (ou nenhum coment√°rio negativo com tema v√°lido)."


        # 4. Formatar o prompt final de insights com os dados calculados
        prompt_final_insights = prompt_geracao_insights.format(
            total_comentarios_analisados=total_analisados_func,
            count_pos=count_pos_func, perc_pos=perc_pos_func,
            count_neg=count_neg_func, perc_neg=perc_neg_func,
            count_neu=count_neu_func, perc_neu=perc_neu_func,
            count_nc_err=count_nc_err_func, perc_nc_err=perc_nc_err_func,
            total_temas_insights=total_temas_insights_func, # Adicionado total para contexto
            top_temas_formatado=top_temas_formatado_func,
            total_temas_neg=total_temas_neg_func, # Adicionado total para contexto
            top_temas_negativos_formatado=top_temas_negativos_formatado_func
        )

        # 5. Chamar a API Gemini para gerar os insights
        safety_settings = { "HARM_CATEGORY_HARASSMENT": "BLOCK_NONE", "HARM_CATEGORY_HATE_SPEECH": "BLOCK_NONE",
                           "HARM_CATEGORY_SEXUALLY_EXPLICIT": "BLOCK_NONE", "HARM_CATEGORY_DANGEROUS_CONTENT": "BLOCK_NONE"}
        request_options = {"timeout": 90} # Aumentar um pouco o timeout para a gera√ß√£o de insights
        response_insights = modelo_gemini.generate_content(
            prompt_final_insights,
            safety_settings=safety_settings,
            request_options=request_options
        )

        # 6. Retorna o texto dos insights gerados
        # Verifica se a resposta cont√©m texto antes de tentar acessar .text
        if response_insights and hasattr(response_insights, 'text'):
            st.session_state.insights_generated = response_insights.text.strip() # Guarda no estado
            return st.session_state.insights_generated
        else:
            # Tenta obter informa√ß√µes do erro se a resposta n√£o tiver texto (ex: bloqueio)
            error_info = "Resposta da API vazia ou inv√°lida."
            if response_insights and hasattr(response_insights, 'prompt_feedback'):
                 error_info = f"Poss√≠vel bloqueio pela API. Feedback: {response_insights.prompt_feedback}"
            st.warning(f"N√£o foi poss√≠vel gerar insights: {error_info}", icon="‚ö†Ô∏è")
            st.session_state.insights_generated = f"*N√£o foi poss√≠vel gerar insights: {error_info}*" # Guarda erro no estado
            return st.session_state.insights_generated


    except Exception as e:
        # Captura erros durante o c√°lculo ou a chamada da API de insights
        st.error(f"Erro durante a gera√ß√£o de insights: {e}", icon="üö®")
        st.session_state.insights_generated = f"*Ocorreu um erro inesperado durante a gera√ß√£o dos insights: {str(e)}*" # Guarda erro
        return st.session_state.insights_generated


# --- Interface Principal ---
st.title("üìä Aplicativo para an√°lise de sentimento e tem√°tica automatizado por IA")
st.markdown("""
Este aplicativo utiliza a IA Generativa do Google (Gemini) para classificar automaticamente o **Sentimento** e a **Tem√°tica** de coment√°rios.
Desenvolvido pelo time de Social Intelligence do Hub de Inova√ß√£o da I&Co. para o Ita√∫.
""")
st.markdown("---")

# --- Controles na Barra Lateral ---
st.sidebar.divider()
st.sidebar.header("Controles")
uploaded_file = st.sidebar.file_uploader(
    "1. Escolha o arquivo (.csv ou .xlsx)",
    type=["csv", "xlsx"],
    key="file_uploader",
    help="Fa√ßa upload de um arquivo CSV ou Excel que contenha uma coluna chamada 'conte√∫do' com os textos a serem analisados."
)

# Identifica a coluna de conte√∫do (assume 'conte√∫do' como padr√£o)
# Poderia ser um selectbox se quisesse deixar o usu√°rio escolher
coluna_conteudo = 'conte√∫do' # Mantenha como 'conte√∫do' por enquanto

# Habilita o bot√£o de an√°lise apenas se a API estiver OK e um arquivo tiver sido carregado
botao_habilitado = st.session_state.get('api_key_configured', False) and uploaded_file is not None
analisar_btn = st.sidebar.button(
    "2. Analisar Coment√°rios",
    key="analyze_button",
    disabled=(not botao_habilitado),
    help="Clique para iniciar a an√°lise dos coment√°rios na coluna 'conte√∫do' do arquivo carregado."
)

# Mensagens de status na barra lateral
if not st.session_state.get('api_key_configured', False):
    st.sidebar.warning("API Key do Google n√£o configurada ou inv√°lida.", icon="‚ö†Ô∏è")
if not uploaded_file:
    st.sidebar.info("Aguardando upload do arquivo...", icon="üì§")
if botao_habilitado:
    st.sidebar.info("Pronto para analisar!", icon="‚úÖ")


# --- √Årea Principal: Pr√©-visualiza√ß√£o e Resultados ---
df_original = None
df_para_analise = None
total_comentarios_para_analisar = 0

# Processa o arquivo carregado
if uploaded_file is not None:
    try:
        # L√™ o arquivo com base na extens√£o
        if uploaded_file.name.endswith('.csv'):
            try:
                # Tenta ler como UTF-8 primeiro
                df_original = pd.read_csv(uploaded_file)
            except UnicodeDecodeError:
                # Se falhar, tenta como Latin-1 (comum em exports do Excel)
                uploaded_file.seek(0) # Volta ao in√≠cio do buffer do arquivo
                df_original = pd.read_csv(uploaded_file, encoding='latin1')
        else: # Assume .xlsx
            df_original = pd.read_excel(uploaded_file)

        # Verifica se a coluna de conte√∫do existe
        if coluna_conteudo not in df_original.columns:
            st.error(f"Erro Cr√≠tico: Coluna '{coluna_conteudo}' n√£o encontrada no arquivo '{uploaded_file.name}'. Verifique o nome da coluna.", icon="üö®")
            df_original = None # Impede processamento adicional
        else:
            # Prepara o DataFrame para an√°lise: remove linhas com conte√∫do vazio/nulo
            df_para_analise = df_original.copy()
            df_para_analise.dropna(subset=[coluna_conteudo], inplace=True)
            df_para_analise = df_para_analise[df_para_analise[coluna_conteudo].astype(str).str.strip() != '']
            total_comentarios_para_analisar = len(df_para_analise)

            # Mostra pr√©-visualiza√ß√£o dos dados originais
            st.subheader("Pr√©-visualiza√ß√£o dos dados originais:")
            st.dataframe(df_original.head(10), use_container_width=True)
            if total_comentarios_para_analisar < len(df_original):
                 st.info(f"Total de linhas no arquivo: {len(df_original)}. Total de coment√°rios v√°lidos para an√°lise (coluna '{coluna_conteudo}' n√£o vazia): **{total_comentarios_para_analisar}**", icon="‚ÑπÔ∏è")
            else:
                 st.info(f"Total de coment√°rios v√°lidos para an√°lise: **{total_comentarios_para_analisar}**", icon="‚ÑπÔ∏è")

    except Exception as e:
        st.error(f"Erro ao ler ou processar o arquivo '{uploaded_file.name}': {e}", icon="üö®")
        df_original = None
        df_para_analise = None

# Container para os resultados (para poder limpar ou atualizar depois)
results_container = st.container()

# --- L√≥gica de An√°lise ---
if analisar_btn and df_para_analise is not None:
    if total_comentarios_para_analisar == 0:
        st.warning("Nenhum coment√°rio v√°lido encontrado na coluna '{coluna_conteudo}' para an√°lise.", icon="‚ö†Ô∏è")
    elif not model:
        st.error("Erro: Modelo Gemini n√£o inicializado. Verifique a configura√ß√£o da API Key na barra lateral.", icon="üö®")
    else:
        # Reseta o estado antes de iniciar nova an√°lise
        st.session_state.analysis_done = False
        st.session_state.df_results = None
        st.session_state.insights_generated = None

        with st.spinner(f"Analisando {total_comentarios_para_analisar} coment√°rios... Isso pode levar alguns minutos."):
            progress_bar = st.progress(0.0) # Inicia a barra de progresso
            status_text = st.empty() # Placeholder para texto de status
            resultados_sentimento = []
            resultados_tema = []
            df_copy_analise = df_para_analise.copy() # Trabalha com c√≥pia

            start_time = time.time() # Medir tempo

            # Itera sobre os coment√°rios v√°lidos para an√°lise
            for i, comentario in enumerate(df_copy_analise[coluna_conteudo]):
                # Chama a fun√ß√£o de an√°lise para cada coment√°rio
                sentimento, tema = analisar_comentario(str(comentario), model)
                resultados_sentimento.append(sentimento)
                resultados_tema.append(tema)

                # Atualiza o progresso
                progresso = (i + 1) / total_comentarios_para_analisar
                # Formata o progresso para exibir como percentual
                progress_bar.progress(progresso)
                status_text.text(f"Analisando: {i+1}/{total_comentarios_para_analisar} ({progresso:.1%})")
                # time.sleep(0.1) # Pequena pausa opcional para evitar sobrecarga visual

            end_time = time.time()
            tempo_total = end_time - start_time

            # Limpa elementos de progresso
            progress_bar.empty()
            status_text.success(f"‚úÖ An√°lise conclu√≠da em {tempo_total:.2f} segundos!", icon="üéâ")

            # Adiciona os resultados ao DataFrame
            df_copy_analise['Sentimento_Classificado'] = resultados_sentimento
            df_copy_analise['Tema_Classificado'] = resultados_tema

            # Salva os resultados no estado da sess√£o
            st.session_state.df_results = df_copy_analise
            st.session_state.analysis_done = True
            # st.rerun() # Re-executa o script para exibir os resultados abaixo
            # N√£o precisa de rerun aqui, pois os resultados ser√£o exibidos na mesma execu√ß√£o

# --- Exibi√ß√£o dos Resultados ---
if st.session_state.analysis_done and st.session_state.df_results is not None:
    with results_container:
        df_results = st.session_state.df_results
        total_analisados_results = len(df_results)

        st.markdown("---")
        st.subheader("Visualiza√ß√£o dos Resultados")

        # --- C√°lculo para NPS e Gr√°ficos ---
        # Filtra apenas sentimentos v√°lidos para gr√°ficos (P, N, Neu)
        df_sent_chart = df_results[~df_results['Sentimento_Classificado'].isin(categorias_excluir_sentimento)].copy()
        sent_counts_chart = df_sent_chart['Sentimento_Classificado'].value_counts()
        total_sent_chart = sent_counts_chart.sum()
        nps_score_num = None

        # Calcula NPS se houver dados v√°lidos
        if total_sent_chart > 0:
            count_pos_chart = sent_counts_chart.get('Positivo', 0)
            count_neu_chart = sent_counts_chart.get('Neutro', 0)
            count_neg_chart = sent_counts_chart.get('Negativo', 0)
            # F√≥rmula NPS adaptada (0-10): Promotores(P) - Detratores(N) + (Neutros * 0.5) normalizado
            # Basicamente, (Pos% - Neg%) * 5 + 5, com neutros valendo metade de positivo
            perc_pos_chart = count_pos_chart / total_sent_chart
            perc_neg_chart = count_neg_chart / total_sent_chart
            # O c√°lculo original estava um pouco diferente, ajustando para escala 0-10 onde P=10, N=0, Neu=5
            # NPS Score = (Promoter % - Detractor %) * 100 (escala -100 a 100)
            # Adaptando para 0-10: ((P% - N%) + 1) * 5 parece mais padr√£o
            nps_formula_standard = ((perc_pos_chart - perc_neg_chart) + 1) / 2 * 10 # Mapeia [-1, 1] para [0, 10]
            nps_score_num = max(0, min(10, nps_formula_standard)) # Garante que fique entre 0 e 10


        # --- Exibi√ß√£o do NPS e Gr√°ficos ---
        nps_col, chart_col1, chart_col2 = st.columns([1, 2, 2]) # Ajuste de propor√ß√£o das colunas
        with nps_col:
            st.markdown("##### NPS Social")
            if nps_score_num is not None:
                st.metric(label="(Escala 0-10)", value=f"{nps_score_num:.1f}")
            else:
                st.metric(label="(Escala 0-10)", value="N/A")
                st.caption("Sem dados P/N/Neu.")

        with chart_col1:
            st.markdown("##### Distribui√ß√£o de Sentimento")
            if total_sent_chart > 0:
                df_plot_sent = pd.DataFrame({'Sentimento': sent_counts_chart.index, 'Volume': sent_counts_chart.values})
                # Ordenar para consist√™ncia visual (opcional)
                df_plot_sent['Sentimento'] = pd.Categorical(df_plot_sent['Sentimento'], categories=["Positivo", "Neutro", "Negativo"], ordered=True)
                df_plot_sent = df_plot_sent.sort_values('Sentimento')

                fig_sent = px.pie(df_plot_sent, names='Sentimento', values='Volume',
                                  hole=0.4, # Gr√°fico de rosca
                                  color='Sentimento',
                                  color_discrete_map={'Positivo': '#28a745', 'Negativo': '#dc3545', 'Neutro': '#ffc107'},
                                  title='Sentimentos (Excluindo N√£o Classif./Erros)')
                fig_sent.update_traces(textposition='outside', textinfo='percent+label',
                                       hovertemplate="<b>%{label}</b><br>Volume: %{value}<br>Percentual: %{percent:.1%}<extra></extra>")
                fig_sent.update_layout(showlegend=False, title_x=0.5, height=350, margin=dict(l=10, r=10, t=40, b=10))
                st.plotly_chart(fig_sent, use_container_width=True)
            else:
                st.warning("Nenhum sentimento Positivo, Negativo ou Neutro classificado para exibir gr√°fico.", icon="üìä")

        with chart_col2:
            st.markdown("##### Distribui√ß√£o Tem√°tica")
            # Filtra temas indesejados para o gr√°fico principal
            df_tema_chart = df_results[~df_results['Tema_Classificado'].isin(categorias_excluir_tema)].copy()
            tema_counts_chart = df_tema_chart['Tema_Classificado'].value_counts()
            total_tema_chart = tema_counts_chart.sum()

            if total_tema_chart > 0:
                tema_perc_chart = (tema_counts_chart / total_tema_chart * 100)
                df_plot_tema = pd.DataFrame({
                    'Tema': tema_counts_chart.index,
                    'Volume': tema_counts_chart.values,
                    'Percentual': tema_perc_chart.values
                }).sort_values(by='Volume', ascending=False) # Ordena por volume

                fig_tema = px.bar(df_plot_tema, x='Tema', y='Volume',
                                  color_discrete_sequence=['#007bff']*len(df_plot_tema), # Azul padr√£o
                                  title='Principais Temas (Excluindo NC/Erro/Intera√ß√£o)',
                                  # Texto no hover mostra Volume e Percentual
                                  hover_data={'Tema': False, 'Volume': True, 'Percentual': ':.1f%'},
                                  text='Volume' # Mostra o volume na barra
                                 )
                fig_tema.update_traces(textposition='outside')
                fig_tema.update_layout(xaxis_title=None, yaxis_title="Volume Bruto", title_x=0.5, height=350,
                                       margin=dict(l=10, r=10, t=40, b=10))
                fig_tema.update_xaxes(tickangle= -30) # Ajusta √¢ngulo dos labels do eixo X
                st.plotly_chart(fig_tema, use_container_width=True)
            else:
                st.warning("Nenhum tema v√°lido (excluindo NC/Erro/Intera√ß√£o) classificado para exibir gr√°fico.", icon="üìä")


        # --- Tabelas de Resumo (Completas, incluindo Erros e NC) ---
        st.markdown("---")
        st.subheader("Tabelas de Resumo Completas")
        col_t1, col_t2 = st.columns(2)

        with col_t1:
            st.markdown("###### Tabela 1: Sentimento (Completa)")
            # Reindexa para garantir que todas as categorias (v√°lidas + erros) apare√ßam, mesmo se contagem for 0
            todas_cats_sent = categorias_sentimento_validas + sorted(list(set(todas_categorias_erro))) # Ordena erros
            sent_counts_all = df_results['Sentimento_Classificado'].value_counts().reindex(todas_cats_sent, fill_value=0)
            sent_perc_all = (sent_counts_all / total_analisados_results * 100) if total_analisados_results > 0 else 0
            tabela_sent = pd.DataFrame({
                'Sentimento': sent_counts_all.index,
                'Volume Bruto': sent_counts_all.values,
                'Percentual (%)': sent_perc_all.values
            })
            # Adiciona linha Total
            total_row_sent = pd.DataFrame({
                'Sentimento': ['Total Geral'],
                'Volume Bruto': [total_analisados_results],
                'Percentual (%)': [100.0]
            })
            # Mostra apenas categorias com volume > 0, mais a linha Total
            tabela_sent_final = pd.concat([tabela_sent[tabela_sent['Volume Bruto'] > 0], total_row_sent], ignore_index=True)
            st.table(tabela_sent_final.style.format({'Percentual (%)': '{:.2f}%'}))

        with col_t2:
            st.markdown("###### Tabela 2: Tem√°tica (Completa)")
            # Reindexa para garantir todas as categorias de tema (v√°lidas + erros)
            todas_cats_tema = categorias_tema_validas + sorted(list(set(todas_categorias_erro))) # Ordena erros
            tema_counts_all = df_results['Tema_Classificado'].value_counts().reindex(todas_cats_tema, fill_value=0)
            # Remove duplicatas no √≠ndice se houver sobreposi√ß√£o (embora n√£o devesse com a l√≥gica atual)
            tema_counts_all = tema_counts_all[~tema_counts_all.index.duplicated(keep='first')]
            tema_perc_all = (tema_counts_all / total_analisados_results * 100) if total_analisados_results > 0 else 0
            tabela_tema = pd.DataFrame({
                'Tema': tema_counts_all.index,
                'Volume Bruto': tema_counts_all.values,
                'Percentual (%)': tema_perc_all.values
            })
            # Adiciona linha Total
            total_row_tema = pd.DataFrame({
                'Tema': ['Total Geral'],
                'Volume Bruto': [total_analisados_results],
                'Percentual (%)': [100.0]
            })
            # Mostra apenas categorias com volume > 0, mais a linha Total
            tabela_tema_final = pd.concat([tabela_tema[tabela_tema['Volume Bruto'] > 0], total_row_tema], ignore_index=True)
            st.table(tabela_tema_final.style.format({'Percentual (%)': '{:.2f}%'}))


        # --- Tabela Completa e Download ---
        st.markdown("---")
        st.subheader("Resultados Completos Detalhados")
        # Mostra o dataframe com as novas colunas de classifica√ß√£o
        st.dataframe(df_results, use_container_width=True)

        # Fun√ß√£o para converter DataFrame para CSV (cache para performance)
        @st.cache_data # Cacheia o resultado da convers√£o
        def convert_df_to_csv(df_conv):
            return df_conv.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig') # utf-8-sig para Excel ler acentos corretamente

        # Prepara o nome do arquivo de download
        if uploaded_file:
            base_name = uploaded_file.name.split('.')[0]
            download_filename = f"{base_name}_analise_gemini.csv"
        else:
            download_filename = 'analise_gemini_resultados.csv'

        # Gera o CSV para download
        csv_output = convert_df_to_csv(df_results)

        # Bot√£o de Download
        st.download_button(
            label="üíæ Download Resultados Completos (.csv)",
            data=csv_output,
            file_name=download_filename,
            mime='text/csv',
            key='download_csv',
            help="Baixa a tabela completa acima, incluindo as classifica√ß√µes de Sentimento e Tema, em formato CSV."
        )

        # --- Se√ß√£o de Gera√ß√£o e Exibi√ß√£o de Insights (NOVA) ---
        st.markdown("---")
        st.subheader("üí° Insights e Percep√ß√µes Acion√°veis")

        # Verifica se a an√°lise foi feita, temos resultados, modelo E se insights ainda n√£o foram gerados/carregados
        if st.session_state.analysis_done and st.session_state.df_results is not None and model:
            # Verifica se os insights j√° foram gerados nesta sess√£o para evitar re-gerar a cada intera√ß√£o
            if st.session_state.insights_generated is None:
                with st.spinner("Gerando insights com base nos resultados..."):
                     # Chama a fun√ß√£o para gerar insights (ela j√° salva no session_state)
                     gerar_insights(st.session_state.df_results, model)

            # Exibe os insights que est√£o salvos no estado da sess√£o
            if st.session_state.insights_generated:
                 st.markdown(st.session_state.insights_generated) # Exibe os insights formatados em Markdown
            else:
                 st.warning("N√£o foi poss√≠vel gerar ou carregar os insights.", icon="‚ö†Ô∏è")

        elif not model:
             st.warning("Modelo Gemini n√£o inicializado. N√£o √© poss√≠vel gerar insights.", icon="‚ö†Ô∏è")
        else:
             st.info("Realize uma an√°lise primeiro para poder gerar os insights.", icon="‚ÑπÔ∏è")


# Mensagem inicial se nenhum arquivo foi carregado ainda
elif not uploaded_file and not st.session_state.analysis_done :
     st.info("‚¨ÖÔ∏è Para come√ßar, configure sua API Key (se necess√°rio) e fa√ßa o upload de um arquivo .csv ou .xlsx na barra lateral.", icon="üëà")